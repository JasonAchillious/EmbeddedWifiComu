
EmbededWifiComu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005140  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005458  08005458  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005458  08005458  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005458  08005458  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011dc  20000074  080054d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001250  080054d4  00021250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b88  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002dbe  00000000  00000000  00033c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c0  00000000  00000000  000369e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001070  00000000  00000000  00037ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003b68  00000000  00000000  00038c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000edde  00000000  00000000  0003c780  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a1912  00000000  00000000  0004b55e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ece70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c4c  00000000  00000000  000eceec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	08005318 	.word	0x08005318

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	08005318 	.word	0x08005318

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000090 	.word	0x20000090
 800026c:	200000e4 	.word	0x200000e4

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b096      	sub	sp, #88	; 0x58
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fb45 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f857 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8bb 	bl	80003f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000282:	f000 f88f 	bl	80003a4 <MX_USART1_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMailQDef(mailSender, 10, mailMsg);
 8000286:	230a      	movs	r3, #10
 8000288:	64bb      	str	r3, [r7, #72]	; 0x48
 800028a:	2380      	movs	r3, #128	; 0x80
 800028c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800028e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000292:	653b      	str	r3, [r7, #80]	; 0x50
  mailSenderHandle = osMailCreate(osMailQ(mailSender), NULL);
 8000294:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fae2 	bl	8002864 <osMailCreate>
 80002a0:	4602      	mov	r2, r0
 80002a2:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <main+0xa4>)
 80002a4:	601a      	str	r2, [r3, #0]

  osMailQDef(mailRecieverHandle, 10, mailMsg);
 80002a6:	230a      	movs	r3, #10
 80002a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80002aa:	2380      	movs	r3, #128	; 0x80
 80002ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80002ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002b2:	643b      	str	r3, [r7, #64]	; 0x40
  mailRecieverHandle = osMailCreate(osMailQ(mailRecieverHandle), NULL);
 80002b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fad2 	bl	8002864 <osMailCreate>
 80002c0:	4602      	mov	r2, r0
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <main+0xa8>)
 80002c4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SenderTask */
  osThreadDef(SenderTask, SenderFunc, osPriorityNormal, 0, 128);
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <main+0xac>)
 80002c8:	f107 041c 	add.w	r4, r7, #28
 80002cc:	461d      	mov	r5, r3
 80002ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SenderTaskHandle = osThreadCreate(osThread(SenderTask), NULL);
 80002da:	f107 031c 	add.w	r3, r7, #28
 80002de:	2100      	movs	r1, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 f960 	bl	80025a6 <osThreadCreate>
 80002e6:	4602      	mov	r2, r0
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <main+0xb0>)
 80002ea:	601a      	str	r2, [r3, #0]

  /* definition and creation of RecieverTask */
  osThreadDef(RecieverTask, RecieverFunc, osPriorityNormal, 0, 128);
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <main+0xb4>)
 80002ee:	463c      	mov	r4, r7
 80002f0:	461d      	mov	r5, r3
 80002f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RecieverTaskHandle = osThreadCreate(osThread(RecieverTask), NULL);
 80002fe:	463b      	mov	r3, r7
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 f94f 	bl	80025a6 <osThreadCreate>
 8000308:	4602      	mov	r2, r0
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <main+0xb8>)
 800030c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800030e:	f002 f943 	bl	8002598 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000312:	e7fe      	b.n	8000312 <main+0xa2>
 8000314:	200011fc 	.word	0x200011fc
 8000318:	20001130 	.word	0x20001130
 800031c:	0800533c 	.word	0x0800533c
 8000320:	2000112c 	.word	0x2000112c
 8000324:	08005368 	.word	0x08005368
 8000328:	20001138 	.word	0x20001138

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f004 fbdb 	bl	8004af6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034e:	2302      	movs	r3, #2
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000352:	2301      	movs	r3, #1
 8000354:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000356:	2310      	movs	r3, #16
 8000358:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035a:	2300      	movs	r3, #0
 800035c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f107 0318 	add.w	r3, r7, #24
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fe52 	bl	800100c <HAL_RCC_OscConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800036e:	f000 f953 	bl	8000618 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	230f      	movs	r3, #15
 8000374:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f001 f8be 	bl	800150c <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000396:	f000 f93f 	bl	8000618 <Error_Handler>
  }
}
 800039a:	bf00      	nop
 800039c:	3740      	adds	r7, #64	; 0x40
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003aa:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <MX_USART1_UART_Init+0x50>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003dc:	f001 fcd2 	bl	8001d84 <HAL_UART_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003e6:	f000 f917 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	2000113c 	.word	0x2000113c
 80003f4:	40013800 	.word	0x40013800

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_GPIO_Init+0x40>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <MX_GPIO_Init+0x40>)
 8000404:	f043 0320 	orr.w	r3, r3, #32
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <MX_GPIO_Init+0x40>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0320 	and.w	r3, r3, #32
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MX_GPIO_Init+0x40>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a07      	ldr	r2, [pc, #28]	; (8000438 <MX_GPIO_Init+0x40>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <MX_GPIO_Init+0x40>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0304 	and.w	r3, r3, #4
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	683b      	ldr	r3, [r7, #0]

}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000

0800043c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a2f      	ldr	r2, [pc, #188]	; (8000508 <HAL_UART_RxCpltCallback+0xcc>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d157      	bne.n	80004fe <HAL_UART_RxCpltCallback+0xc2>
		static uint8_t uRx_Data[128];
		static unsigned int uLength = 0;
		static mailMsg * send_msg;
		static osStatus send_status;
		static char send_error[100];
		if(rxBuffer[0] == '\n')
 800044e:	4b2f      	ldr	r3, [pc, #188]	; (800050c <HAL_UART_RxCpltCallback+0xd0>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b0a      	cmp	r3, #10
 8000454:	d148      	bne.n	80004e8 <HAL_UART_RxCpltCallback+0xac>
		{
			uLength -= 1;
 8000456:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <HAL_UART_RxCpltCallback+0xd4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3b01      	subs	r3, #1
 800045c:	4a2c      	ldr	r2, [pc, #176]	; (8000510 <HAL_UART_RxCpltCallback+0xd4>)
 800045e:	6013      	str	r3, [r2, #0]
			send_msg = (mailMsg *)osMailAlloc(mailSenderHandle, osWaitForever);
 8000460:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <HAL_UART_RxCpltCallback+0xd8>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f04f 31ff 	mov.w	r1, #4294967295
 8000468:	4618      	mov	r0, r3
 800046a:	f002 fa53 	bl	8002914 <osMailAlloc>
 800046e:	4602      	mov	r2, r0
 8000470:	4b29      	ldr	r3, [pc, #164]	; (8000518 <HAL_UART_RxCpltCallback+0xdc>)
 8000472:	601a      	str	r2, [r3, #0]
			for (int i=0; i<uLength; i++){
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	e00c      	b.n	8000494 <HAL_UART_RxCpltCallback+0x58>
				send_msg->msg[i] = uRx_Data[i];
 800047a:	4b27      	ldr	r3, [pc, #156]	; (8000518 <HAL_UART_RxCpltCallback+0xdc>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	4927      	ldr	r1, [pc, #156]	; (800051c <HAL_UART_RxCpltCallback+0xe0>)
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	440b      	add	r3, r1
 8000484:	7819      	ldrb	r1, [r3, #0]
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	4413      	add	r3, r2
 800048a:	460a      	mov	r2, r1
 800048c:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<uLength; i++){
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	3301      	adds	r3, #1
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <HAL_UART_RxCpltCallback+0xd4>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	429a      	cmp	r2, r3
 800049c:	d3ed      	bcc.n	800047a <HAL_UART_RxCpltCallback+0x3e>
			}
			send_status = osMailPut(mailSenderHandle, send_msg);
 800049e:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <HAL_UART_RxCpltCallback+0xd8>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <HAL_UART_RxCpltCallback+0xdc>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4619      	mov	r1, r3
 80004a8:	4610      	mov	r0, r2
 80004aa:	f002 fa49 	bl	8002940 <osMailPut>
 80004ae:	4602      	mov	r2, r0
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <HAL_UART_RxCpltCallback+0xe4>)
 80004b2:	601a      	str	r2, [r3, #0]
			if (send_status == osOK){
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <HAL_UART_RxCpltCallback+0xe4>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d011      	beq.n	80004e0 <HAL_UART_RxCpltCallback+0xa4>

			}else{
				sprintf(send_error, "Fail to put into sender queue. The status: %d\r\n", send_status);
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <HAL_UART_RxCpltCallback+0xe4>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	4918      	ldr	r1, [pc, #96]	; (8000524 <HAL_UART_RxCpltCallback+0xe8>)
 80004c4:	4818      	ldr	r0, [pc, #96]	; (8000528 <HAL_UART_RxCpltCallback+0xec>)
 80004c6:	f004 fbd5 	bl	8004c74 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)send_error, strlen(send_error), HAL_MAX_DELAY);
 80004ca:	4817      	ldr	r0, [pc, #92]	; (8000528 <HAL_UART_RxCpltCallback+0xec>)
 80004cc:	f7ff feb0 	bl	8000230 <strlen>
 80004d0:	4603      	mov	r3, r0
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295
 80004d8:	4913      	ldr	r1, [pc, #76]	; (8000528 <HAL_UART_RxCpltCallback+0xec>)
 80004da:	4814      	ldr	r0, [pc, #80]	; (800052c <HAL_UART_RxCpltCallback+0xf0>)
 80004dc:	f001 fc9f 	bl	8001e1e <HAL_UART_Transmit>
			}
			uLength = 0;
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_UART_RxCpltCallback+0xd4>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
			uLength++;
			// TODO handle the case if uLength is bigger than the buffer length
		}

	}
}
 80004e6:	e00a      	b.n	80004fe <HAL_UART_RxCpltCallback+0xc2>
			uRx_Data[uLength] = rxBuffer[0];
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <HAL_UART_RxCpltCallback+0xd4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a07      	ldr	r2, [pc, #28]	; (800050c <HAL_UART_RxCpltCallback+0xd0>)
 80004ee:	7811      	ldrb	r1, [r2, #0]
 80004f0:	4a0a      	ldr	r2, [pc, #40]	; (800051c <HAL_UART_RxCpltCallback+0xe0>)
 80004f2:	54d1      	strb	r1, [r2, r3]
			uLength++;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_UART_RxCpltCallback+0xd4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <HAL_UART_RxCpltCallback+0xd4>)
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40013800 	.word	0x40013800
 800050c:	2000117c 	.word	0x2000117c
 8000510:	200002e4 	.word	0x200002e4
 8000514:	200011fc 	.word	0x200011fc
 8000518:	200002e8 	.word	0x200002e8
 800051c:	200002ec 	.word	0x200002ec
 8000520:	2000036c 	.word	0x2000036c
 8000524:	08005384 	.word	0x08005384
 8000528:	20000370 	.word	0x20000370
 800052c:	2000113c 	.word	0x2000113c

08000530 <SenderFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_SenderFunc */
void SenderFunc(void const * argument)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0b8      	sub	sp, #224	; 0xe0
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	mailMsg *p_send_msg;
	char info[200];
  /* Infinite loop */
  for(;;)
  {
	  sender_buffer_event = osMailGet(mailSenderHandle, osWaitForever);
 8000538:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <SenderFunc+0xa4>)
 800053a:	6819      	ldr	r1, [r3, #0]
 800053c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000540:	f04f 32ff 	mov.w	r2, #4294967295
 8000544:	4618      	mov	r0, r3
 8000546:	f002 fa39 	bl	80029bc <osMailGet>
	  if (sender_buffer_event.status == osEventMail)
 800054a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800054e:	2b20      	cmp	r3, #32
 8000550:	d129      	bne.n	80005a6 <SenderFunc+0x76>
	  {
		  p_send_msg = sender_buffer_event.value.p;
 8000552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		  send_msg(p_send_msg->msg);
 800055a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f9a0 	bl	80008a4 <send_msg>

		  sprintf(info, "Successfully send the: %s \r\n", p_send_msg->msg);
 8000564:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	491a      	ldr	r1, [pc, #104]	; (80005d8 <SenderFunc+0xa8>)
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fb80 	bl	8004c74 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff fe59 	bl	8000230 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	b29a      	uxth	r2, r3
 8000582:	f107 0108 	add.w	r1, r7, #8
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	4814      	ldr	r0, [pc, #80]	; (80005dc <SenderFunc+0xac>)
 800058c:	f001 fc47 	bl	8001e1e <HAL_UART_Transmit>
		  osMailFree(mailSenderHandle, p_send_msg);
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <SenderFunc+0xa4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8000598:	4618      	mov	r0, r3
 800059a:	f002 fa83 	bl	8002aa4 <osMailFree>
		  osDelay(100);
 800059e:	2064      	movs	r0, #100	; 0x64
 80005a0:	f002 f84d 	bl	800263e <osDelay>
 80005a4:	e7c8      	b.n	8000538 <SenderFunc+0x8>
	  }else{
		  sprintf(info, "Exception. status: %d \r\n", sender_buffer_event.status);
 80005a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	490c      	ldr	r1, [pc, #48]	; (80005e0 <SenderFunc+0xb0>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 fb5f 	bl	8004c74 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b6:	f107 0308 	add.w	r3, r7, #8
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fe38 	bl	8000230 <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	f107 0108 	add.w	r1, r7, #8
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <SenderFunc+0xac>)
 80005ce:	f001 fc26 	bl	8001e1e <HAL_UART_Transmit>
	  sender_buffer_event = osMailGet(mailSenderHandle, osWaitForever);
 80005d2:	e7b1      	b.n	8000538 <SenderFunc+0x8>
 80005d4:	200011fc 	.word	0x200011fc
 80005d8:	080053b4 	.word	0x080053b4
 80005dc:	2000113c 	.word	0x2000113c
 80005e0:	080053d4 	.word	0x080053d4

080005e4 <RecieverFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RecieverFunc */
void RecieverFunc(void const * argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RecieverFunc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f002 f826 	bl	800263e <osDelay>
 80005f2:	e7fb      	b.n	80005ec <RecieverFunc+0x8>

080005f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d101      	bne.n	800060a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000606:	f000 f993 	bl	8000930 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40000400 	.word	0x40000400

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_MspInit+0x68>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <HAL_MspInit+0x68>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_MspInit+0x68>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_MspInit+0x68>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a11      	ldr	r2, [pc, #68]	; (800068c <HAL_MspInit+0x68>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <HAL_MspInit+0x68>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	210f      	movs	r1, #15
 800065e:	f06f 0001 	mvn.w	r0, #1
 8000662:	f000 fa36 	bl	8000ad2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_MspInit+0x6c>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_MspInit+0x6c>)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000
 8000690:	40010000 	.word	0x40010000

08000694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a20      	ldr	r2, [pc, #128]	; (8000730 <HAL_UART_MspInit+0x9c>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d139      	bne.n	8000728 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <HAL_UART_MspInit+0xa0>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <HAL_UART_MspInit+0xa0>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <HAL_UART_MspInit+0xa0>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <HAL_UART_MspInit+0xa0>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a18      	ldr	r2, [pc, #96]	; (8000734 <HAL_UART_MspInit+0xa0>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_UART_MspInit+0xa0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4619      	mov	r1, r3
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <HAL_UART_MspInit+0xa4>)
 80006fa:	f000 fb1d 	bl	8000d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <HAL_UART_MspInit+0xa4>)
 8000714:	f000 fb10 	bl	8000d38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2105      	movs	r1, #5
 800071c:	2025      	movs	r0, #37	; 0x25
 800071e:	f000 f9d8 	bl	8000ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000722:	2025      	movs	r0, #37	; 0x25
 8000724:	f000 f9f1 	bl	8000b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40013800 	.word	0x40013800
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800

0800073c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	201d      	movs	r0, #29
 8000752:	f000 f9be 	bl	8000ad2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8000756:	201d      	movs	r0, #29
 8000758:	f000 f9d7 	bl	8000b0a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <HAL_InitTick+0x9c>)
 800075e:	69db      	ldr	r3, [r3, #28]
 8000760:	4a1d      	ldr	r2, [pc, #116]	; (80007d8 <HAL_InitTick+0x9c>)
 8000762:	f043 0302 	orr.w	r3, r3, #2
 8000766:	61d3      	str	r3, [r2, #28]
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <HAL_InitTick+0x9c>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000774:	f107 0210 	add.w	r2, r7, #16
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f001 f842 	bl	8001808 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000784:	f001 f818 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 8000788:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078c:	4a13      	ldr	r2, [pc, #76]	; (80007dc <HAL_InitTick+0xa0>)
 800078e:	fba2 2303 	umull	r2, r3, r2, r3
 8000792:	0c9b      	lsrs	r3, r3, #18
 8000794:	3b01      	subs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_InitTick+0xa4>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <HAL_InitTick+0xa8>)
 800079c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <HAL_InitTick+0xa4>)
 80007a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007a4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <HAL_InitTick+0xa4>)
 80007a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007aa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <HAL_InitTick+0xa4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_InitTick+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <HAL_InitTick+0xa4>)
 80007ba:	f001 f873 	bl	80018a4 <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <HAL_InitTick+0xa4>)
 80007c6:	f001 f8c5 	bl	8001954 <HAL_TIM_Base_Start_IT>
 80007ca:	4603      	mov	r3, r0
 80007cc:	e000      	b.n	80007d0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3730      	adds	r7, #48	; 0x30
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	431bde83 	.word	0x431bde83
 80007e0:	20001200 	.word	0x20001200
 80007e4:	40000400 	.word	0x40000400

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <HardFault_Handler+0x4>

080007fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <MemManage_Handler+0x4>

08000800 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <BusFault_Handler+0x4>

08000806 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <UsageFault_Handler+0x4>

0800080c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <TIM3_IRQHandler+0x10>)
 800081e:	f001 f8f9 	bl	8001a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20001200 	.word	0x20001200

0800082c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <USART1_IRQHandler+0x10>)
 8000832:	f001 fb87 	bl	8001f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000113c 	.word	0x2000113c

08000840 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <_sbrk+0x50>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <_sbrk+0x16>
		heap_end = &end;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <_sbrk+0x50>)
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <_sbrk+0x54>)
 8000854:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <_sbrk+0x50>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <_sbrk+0x50>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	466a      	mov	r2, sp
 8000866:	4293      	cmp	r3, r2
 8000868:	d907      	bls.n	800087a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800086a:	f004 f90f 	bl	8004a8c <__errno>
 800086e:	4602      	mov	r2, r0
 8000870:	230c      	movs	r3, #12
 8000872:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	e006      	b.n	8000888 <_sbrk+0x48>
	}

	heap_end += incr;
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <_sbrk+0x50>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	4a03      	ldr	r2, [pc, #12]	; (8000890 <_sbrk+0x50>)
 8000884:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200003d4 	.word	0x200003d4
 8000894:	20001250 	.word	0x20001250

08000898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <send_msg>:

void disconnect(void){

}

void send_msg(char msg[]){
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
	...

080008b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008ba:	e003      	b.n	80008c4 <LoopCopyDataInit>

080008bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008c2:	3104      	adds	r1, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008c4:	480a      	ldr	r0, [pc, #40]	; (80008f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008cc:	d3f6      	bcc.n	80008bc <CopyDataInit>
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008d0:	e002      	b.n	80008d8 <LoopFillZerobss>

080008d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008d4:	f842 3b04 	str.w	r3, [r2], #4

080008d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008dc:	d3f9      	bcc.n	80008d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008de:	f7ff ffdb 	bl	8000898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e2:	f004 f8d9 	bl	8004a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff fcc3 	bl	8000270 <main>
  bx lr
 80008ea:	4770      	bx	lr
  ldr r3, =_sidata
 80008ec:	08005460 	.word	0x08005460
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008f4:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80008f8:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80008fc:	20001250 	.word	0x20001250

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_Init+0x28>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <HAL_Init+0x28>)
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 f8d1 	bl	8000abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff ff0e 	bl	800073c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff fe80 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40022000 	.word	0x40022000

08000930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x1c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x20>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a03      	ldr	r2, [pc, #12]	; (8000950 <HAL_IncTick+0x20>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	20000008 	.word	0x20000008
 8000950:	20001248 	.word	0x20001248

08000954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <HAL_GetTick+0x10>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20001248 	.word	0x20001248

08000968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_GetPriorityGrouping+0x18>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	f003 0307 	and.w	r3, r3, #7
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	db0b      	blt.n	80009f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	f003 021f 	and.w	r2, r3, #31
 80009e4:	4906      	ldr	r1, [pc, #24]	; (8000a00 <__NVIC_EnableIRQ+0x34>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	095b      	lsrs	r3, r3, #5
 80009ec:	2001      	movs	r0, #1
 80009ee:	fa00 f202 	lsl.w	r2, r0, r2
 80009f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0a      	blt.n	8000a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	490c      	ldr	r1, [pc, #48]	; (8000a50 <__NVIC_SetPriority+0x4c>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	440b      	add	r3, r1
 8000a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a2c:	e00a      	b.n	8000a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <__NVIC_SetPriority+0x50>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	440b      	add	r3, r1
 8000a42:	761a      	strb	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f1c3 0307 	rsb	r3, r3, #7
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	bf28      	it	cs
 8000a76:	2304      	movcs	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d902      	bls.n	8000a88 <NVIC_EncodePriority+0x30>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	e000      	b.n	8000a8a <NVIC_EncodePriority+0x32>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43da      	mvns	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43d9      	mvns	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4313      	orrs	r3, r2
         );
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	; 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff4f 	bl	8000968 <__NVIC_SetPriorityGrouping>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae4:	f7ff ff64 	bl	80009b0 <__NVIC_GetPriorityGrouping>
 8000ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	6978      	ldr	r0, [r7, #20]
 8000af0:	f7ff ffb2 	bl	8000a58 <NVIC_EncodePriority>
 8000af4:	4602      	mov	r2, r0
 8000af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff81 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff57 	bl	80009cc <__NVIC_EnableIRQ>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d005      	beq.n	8000b4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2204      	movs	r2, #4
 8000b42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e0d6      	b.n	8000cf8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 020e 	bic.w	r2, r2, #14
 8000b58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0201 	bic.w	r2, r2, #1
 8000b68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b64      	ldr	r3, [pc, #400]	; (8000d04 <HAL_DMA_Abort_IT+0x1dc>)
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d958      	bls.n	8000c28 <HAL_DMA_Abort_IT+0x100>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a63      	ldr	r2, [pc, #396]	; (8000d08 <HAL_DMA_Abort_IT+0x1e0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d04f      	beq.n	8000c20 <HAL_DMA_Abort_IT+0xf8>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a61      	ldr	r2, [pc, #388]	; (8000d0c <HAL_DMA_Abort_IT+0x1e4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d048      	beq.n	8000c1c <HAL_DMA_Abort_IT+0xf4>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a60      	ldr	r2, [pc, #384]	; (8000d10 <HAL_DMA_Abort_IT+0x1e8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d040      	beq.n	8000c16 <HAL_DMA_Abort_IT+0xee>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a5e      	ldr	r2, [pc, #376]	; (8000d14 <HAL_DMA_Abort_IT+0x1ec>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d038      	beq.n	8000c10 <HAL_DMA_Abort_IT+0xe8>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a5d      	ldr	r2, [pc, #372]	; (8000d18 <HAL_DMA_Abort_IT+0x1f0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d030      	beq.n	8000c0a <HAL_DMA_Abort_IT+0xe2>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a5b      	ldr	r2, [pc, #364]	; (8000d1c <HAL_DMA_Abort_IT+0x1f4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d028      	beq.n	8000c04 <HAL_DMA_Abort_IT+0xdc>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a53      	ldr	r2, [pc, #332]	; (8000d04 <HAL_DMA_Abort_IT+0x1dc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d020      	beq.n	8000bfe <HAL_DMA_Abort_IT+0xd6>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a57      	ldr	r2, [pc, #348]	; (8000d20 <HAL_DMA_Abort_IT+0x1f8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d019      	beq.n	8000bfa <HAL_DMA_Abort_IT+0xd2>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a56      	ldr	r2, [pc, #344]	; (8000d24 <HAL_DMA_Abort_IT+0x1fc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d012      	beq.n	8000bf6 <HAL_DMA_Abort_IT+0xce>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a54      	ldr	r2, [pc, #336]	; (8000d28 <HAL_DMA_Abort_IT+0x200>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d00a      	beq.n	8000bf0 <HAL_DMA_Abort_IT+0xc8>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a53      	ldr	r2, [pc, #332]	; (8000d2c <HAL_DMA_Abort_IT+0x204>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d102      	bne.n	8000bea <HAL_DMA_Abort_IT+0xc2>
 8000be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be8:	e01b      	b.n	8000c22 <HAL_DMA_Abort_IT+0xfa>
 8000bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bee:	e018      	b.n	8000c22 <HAL_DMA_Abort_IT+0xfa>
 8000bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf4:	e015      	b.n	8000c22 <HAL_DMA_Abort_IT+0xfa>
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	e013      	b.n	8000c22 <HAL_DMA_Abort_IT+0xfa>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e011      	b.n	8000c22 <HAL_DMA_Abort_IT+0xfa>
 8000bfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c02:	e00e      	b.n	8000c22 <HAL_DMA_Abort_IT+0xfa>
 8000c04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c08:	e00b      	b.n	8000c22 <HAL_DMA_Abort_IT+0xfa>
 8000c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0e:	e008      	b.n	8000c22 <HAL_DMA_Abort_IT+0xfa>
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	e005      	b.n	8000c22 <HAL_DMA_Abort_IT+0xfa>
 8000c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1a:	e002      	b.n	8000c22 <HAL_DMA_Abort_IT+0xfa>
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	e000      	b.n	8000c22 <HAL_DMA_Abort_IT+0xfa>
 8000c20:	2301      	movs	r3, #1
 8000c22:	4a43      	ldr	r2, [pc, #268]	; (8000d30 <HAL_DMA_Abort_IT+0x208>)
 8000c24:	6053      	str	r3, [r2, #4]
 8000c26:	e057      	b.n	8000cd8 <HAL_DMA_Abort_IT+0x1b0>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a36      	ldr	r2, [pc, #216]	; (8000d08 <HAL_DMA_Abort_IT+0x1e0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d04f      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0x1aa>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a35      	ldr	r2, [pc, #212]	; (8000d0c <HAL_DMA_Abort_IT+0x1e4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d048      	beq.n	8000cce <HAL_DMA_Abort_IT+0x1a6>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <HAL_DMA_Abort_IT+0x1e8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d040      	beq.n	8000cc8 <HAL_DMA_Abort_IT+0x1a0>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <HAL_DMA_Abort_IT+0x1ec>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d038      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0x19a>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a30      	ldr	r2, [pc, #192]	; (8000d18 <HAL_DMA_Abort_IT+0x1f0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d030      	beq.n	8000cbc <HAL_DMA_Abort_IT+0x194>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a2f      	ldr	r2, [pc, #188]	; (8000d1c <HAL_DMA_Abort_IT+0x1f4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d028      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0x18e>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a26      	ldr	r2, [pc, #152]	; (8000d04 <HAL_DMA_Abort_IT+0x1dc>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d020      	beq.n	8000cb0 <HAL_DMA_Abort_IT+0x188>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a2b      	ldr	r2, [pc, #172]	; (8000d20 <HAL_DMA_Abort_IT+0x1f8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d019      	beq.n	8000cac <HAL_DMA_Abort_IT+0x184>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a29      	ldr	r2, [pc, #164]	; (8000d24 <HAL_DMA_Abort_IT+0x1fc>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d012      	beq.n	8000ca8 <HAL_DMA_Abort_IT+0x180>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a28      	ldr	r2, [pc, #160]	; (8000d28 <HAL_DMA_Abort_IT+0x200>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d00a      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0x17a>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <HAL_DMA_Abort_IT+0x204>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d102      	bne.n	8000c9c <HAL_DMA_Abort_IT+0x174>
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	e01b      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x1ac>
 8000c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca0:	e018      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x1ac>
 8000ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca6:	e015      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x1ac>
 8000ca8:	2310      	movs	r3, #16
 8000caa:	e013      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x1ac>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e011      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x1ac>
 8000cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cb4:	e00e      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x1ac>
 8000cb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cba:	e00b      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x1ac>
 8000cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc0:	e008      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x1ac>
 8000cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc6:	e005      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x1ac>
 8000cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ccc:	e002      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x1ac>
 8000cce:	2310      	movs	r3, #16
 8000cd0:	e000      	b.n	8000cd4 <HAL_DMA_Abort_IT+0x1ac>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <HAL_DMA_Abort_IT+0x20c>)
 8000cd6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	4798      	blx	r3
    } 
  }
  return status;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40020080 	.word	0x40020080
 8000d08:	40020008 	.word	0x40020008
 8000d0c:	4002001c 	.word	0x4002001c
 8000d10:	40020030 	.word	0x40020030
 8000d14:	40020044 	.word	0x40020044
 8000d18:	40020058 	.word	0x40020058
 8000d1c:	4002006c 	.word	0x4002006c
 8000d20:	40020408 	.word	0x40020408
 8000d24:	4002041c 	.word	0x4002041c
 8000d28:	40020430 	.word	0x40020430
 8000d2c:	40020444 	.word	0x40020444
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40020000 	.word	0x40020000

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b08b      	sub	sp, #44	; 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e133      	b.n	8000fb4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8122 	bne.w	8000fae <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b12      	cmp	r3, #18
 8000d70:	d034      	beq.n	8000ddc <HAL_GPIO_Init+0xa4>
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d80d      	bhi.n	8000d92 <HAL_GPIO_Init+0x5a>
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d02b      	beq.n	8000dd2 <HAL_GPIO_Init+0x9a>
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d804      	bhi.n	8000d88 <HAL_GPIO_Init+0x50>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d031      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d01c      	beq.n	8000dc0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d86:	e048      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d043      	beq.n	8000e14 <HAL_GPIO_Init+0xdc>
 8000d8c:	2b11      	cmp	r3, #17
 8000d8e:	d01b      	beq.n	8000dc8 <HAL_GPIO_Init+0x90>
          break;
 8000d90:	e043      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d92:	4a8f      	ldr	r2, [pc, #572]	; (8000fd0 <HAL_GPIO_Init+0x298>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d026      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
 8000d98:	4a8d      	ldr	r2, [pc, #564]	; (8000fd0 <HAL_GPIO_Init+0x298>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d806      	bhi.n	8000dac <HAL_GPIO_Init+0x74>
 8000d9e:	4a8d      	ldr	r2, [pc, #564]	; (8000fd4 <HAL_GPIO_Init+0x29c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d020      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
 8000da4:	4a8c      	ldr	r2, [pc, #560]	; (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01d      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
          break;
 8000daa:	e036      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dac:	4a8b      	ldr	r2, [pc, #556]	; (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d019      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
 8000db2:	4a8b      	ldr	r2, [pc, #556]	; (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d016      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
 8000db8:	4a8a      	ldr	r2, [pc, #552]	; (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d013      	beq.n	8000de6 <HAL_GPIO_Init+0xae>
          break;
 8000dbe:	e02c      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e028      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	623b      	str	r3, [r7, #32]
          break;
 8000dd0:	e023      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	3308      	adds	r3, #8
 8000dd8:	623b      	str	r3, [r7, #32]
          break;
 8000dda:	e01e      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	330c      	adds	r3, #12
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	e019      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dee:	2304      	movs	r3, #4
 8000df0:	623b      	str	r3, [r7, #32]
          break;
 8000df2:	e012      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d105      	bne.n	8000e08 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	611a      	str	r2, [r3, #16]
          break;
 8000e06:	e008      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	615a      	str	r2, [r3, #20]
          break;
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
          break;
 8000e18:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	2bff      	cmp	r3, #255	; 0xff
 8000e1e:	d801      	bhi.n	8000e24 <HAL_GPIO_Init+0xec>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	e001      	b.n	8000e28 <HAL_GPIO_Init+0xf0>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3304      	adds	r3, #4
 8000e28:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2bff      	cmp	r3, #255	; 0xff
 8000e2e:	d802      	bhi.n	8000e36 <HAL_GPIO_Init+0xfe>
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x104>
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	3b08      	subs	r3, #8
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	210f      	movs	r1, #15
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	6a39      	ldr	r1, [r7, #32]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	431a      	orrs	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 80a2 	beq.w	8000fae <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6a:	4b5f      	ldr	r3, [pc, #380]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a5e      	ldr	r2, [pc, #376]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b5c      	ldr	r3, [pc, #368]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e82:	4a5a      	ldr	r2, [pc, #360]	; (8000fec <HAL_GPIO_Init+0x2b4>)
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a51      	ldr	r2, [pc, #324]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d01f      	beq.n	8000eee <HAL_GPIO_Init+0x1b6>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a50      	ldr	r2, [pc, #320]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d019      	beq.n	8000eea <HAL_GPIO_Init+0x1b2>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	; (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d013      	beq.n	8000ee6 <HAL_GPIO_Init+0x1ae>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4e      	ldr	r2, [pc, #312]	; (8000ffc <HAL_GPIO_Init+0x2c4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_GPIO_Init+0x1aa>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4d      	ldr	r2, [pc, #308]	; (8001000 <HAL_GPIO_Init+0x2c8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d007      	beq.n	8000ede <HAL_GPIO_Init+0x1a6>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4c      	ldr	r2, [pc, #304]	; (8001004 <HAL_GPIO_Init+0x2cc>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d101      	bne.n	8000eda <HAL_GPIO_Init+0x1a2>
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	e00a      	b.n	8000ef0 <HAL_GPIO_Init+0x1b8>
 8000eda:	2306      	movs	r3, #6
 8000edc:	e008      	b.n	8000ef0 <HAL_GPIO_Init+0x1b8>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x1b8>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e004      	b.n	8000ef0 <HAL_GPIO_Init+0x1b8>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_Init+0x1b8>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_GPIO_Init+0x1b8>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef2:	f002 0203 	and.w	r2, r2, #3
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	4093      	lsls	r3, r2
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f00:	493a      	ldr	r1, [pc, #232]	; (8000fec <HAL_GPIO_Init+0x2b4>)
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d006      	beq.n	8000f28 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	493a      	ldr	r1, [pc, #232]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
 8000f26:	e006      	b.n	8000f36 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f28:	4b37      	ldr	r3, [pc, #220]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	4935      	ldr	r1, [pc, #212]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	4930      	ldr	r1, [pc, #192]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	604b      	str	r3, [r1, #4]
 8000f4e:	e006      	b.n	8000f5e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	492b      	ldr	r1, [pc, #172]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d006      	beq.n	8000f78 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	4926      	ldr	r1, [pc, #152]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	608b      	str	r3, [r1, #8]
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	4921      	ldr	r1, [pc, #132]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d006      	beq.n	8000fa0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	491c      	ldr	r1, [pc, #112]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	60cb      	str	r3, [r1, #12]
 8000f9e:	e006      	b.n	8000fae <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	4917      	ldr	r1, [pc, #92]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	fa22 f303 	lsr.w	r3, r2, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f47f aec4 	bne.w	8000d4c <HAL_GPIO_Init+0x14>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	372c      	adds	r7, #44	; 0x2c
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	10210000 	.word	0x10210000
 8000fd4:	10110000 	.word	0x10110000
 8000fd8:	10120000 	.word	0x10120000
 8000fdc:	10310000 	.word	0x10310000
 8000fe0:	10320000 	.word	0x10320000
 8000fe4:	10220000 	.word	0x10220000
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	40010c00 	.word	0x40010c00
 8000ff8:	40011000 	.word	0x40011000
 8000ffc:	40011400 	.word	0x40011400
 8001000:	40011800 	.word	0x40011800
 8001004:	40011c00 	.word	0x40011c00
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e26c      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8087 	beq.w	800113a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800102c:	4b92      	ldr	r3, [pc, #584]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b04      	cmp	r3, #4
 8001036:	d00c      	beq.n	8001052 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001038:	4b8f      	ldr	r3, [pc, #572]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 030c 	and.w	r3, r3, #12
 8001040:	2b08      	cmp	r3, #8
 8001042:	d112      	bne.n	800106a <HAL_RCC_OscConfig+0x5e>
 8001044:	4b8c      	ldr	r3, [pc, #560]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001050:	d10b      	bne.n	800106a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001052:	4b89      	ldr	r3, [pc, #548]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d06c      	beq.n	8001138 <HAL_RCC_OscConfig+0x12c>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d168      	bne.n	8001138 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e246      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001072:	d106      	bne.n	8001082 <HAL_RCC_OscConfig+0x76>
 8001074:	4b80      	ldr	r3, [pc, #512]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a7f      	ldr	r2, [pc, #508]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800107a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	e02e      	b.n	80010e0 <HAL_RCC_OscConfig+0xd4>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x98>
 800108a:	4b7b      	ldr	r3, [pc, #492]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a7a      	ldr	r2, [pc, #488]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b78      	ldr	r3, [pc, #480]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a77      	ldr	r2, [pc, #476]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800109c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e01d      	b.n	80010e0 <HAL_RCC_OscConfig+0xd4>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0xbc>
 80010ae:	4b72      	ldr	r3, [pc, #456]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a71      	ldr	r2, [pc, #452]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b6f      	ldr	r3, [pc, #444]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a6e      	ldr	r2, [pc, #440]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e00b      	b.n	80010e0 <HAL_RCC_OscConfig+0xd4>
 80010c8:	4b6b      	ldr	r3, [pc, #428]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a6a      	ldr	r2, [pc, #424]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b68      	ldr	r3, [pc, #416]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a67      	ldr	r2, [pc, #412]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d013      	beq.n	8001110 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc34 	bl	8000954 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fc30 	bl	8000954 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1fa      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0xe4>
 800110e:	e014      	b.n	800113a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fc20 	bl	8000954 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fc1c 	bl	8000954 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	; 0x64
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e1e6      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	4b53      	ldr	r3, [pc, #332]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x10c>
 8001136:	e000      	b.n	800113a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d063      	beq.n	800120e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001152:	4b49      	ldr	r3, [pc, #292]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b08      	cmp	r3, #8
 800115c:	d11c      	bne.n	8001198 <HAL_RCC_OscConfig+0x18c>
 800115e:	4b46      	ldr	r3, [pc, #280]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d116      	bne.n	8001198 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	4b43      	ldr	r3, [pc, #268]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <HAL_RCC_OscConfig+0x176>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d001      	beq.n	8001182 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e1ba      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4939      	ldr	r1, [pc, #228]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	e03a      	b.n	800120e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fbd5 	bl	8000954 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ae:	f7ff fbd1 	bl	8000954 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e19b      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4927      	ldr	r1, [pc, #156]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fbb4 	bl	8000954 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fbb0 	bl	8000954 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e17a      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d03a      	beq.n	8001290 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d019      	beq.n	8001256 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_RCC_OscConfig+0x274>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001228:	f7ff fb94 	bl	8000954 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff fb90 	bl	8000954 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e15a      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_RCC_OscConfig+0x26c>)
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f000 fb0a 	bl	8001868 <RCC_Delay>
 8001254:	e01c      	b.n	8001290 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_RCC_OscConfig+0x274>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125c:	f7ff fb7a 	bl	8000954 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001262:	e00f      	b.n	8001284 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001264:	f7ff fb76 	bl	8000954 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d908      	bls.n	8001284 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e140      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	42420000 	.word	0x42420000
 8001280:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	4b9e      	ldr	r3, [pc, #632]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e9      	bne.n	8001264 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80a6 	beq.w	80013ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a2:	4b97      	ldr	r3, [pc, #604]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10d      	bne.n	80012ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b94      	ldr	r3, [pc, #592]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a93      	ldr	r2, [pc, #588]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b91      	ldr	r3, [pc, #580]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c6:	2301      	movs	r3, #1
 80012c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ca:	4b8e      	ldr	r3, [pc, #568]	; (8001504 <HAL_RCC_OscConfig+0x4f8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d118      	bne.n	8001308 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d6:	4b8b      	ldr	r3, [pc, #556]	; (8001504 <HAL_RCC_OscConfig+0x4f8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a8a      	ldr	r2, [pc, #552]	; (8001504 <HAL_RCC_OscConfig+0x4f8>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fb37 	bl	8000954 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ea:	f7ff fb33 	bl	8000954 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b64      	cmp	r3, #100	; 0x64
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e0fd      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	4b81      	ldr	r3, [pc, #516]	; (8001504 <HAL_RCC_OscConfig+0x4f8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d106      	bne.n	800131e <HAL_RCC_OscConfig+0x312>
 8001310:	4b7b      	ldr	r3, [pc, #492]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4a7a      	ldr	r2, [pc, #488]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6213      	str	r3, [r2, #32]
 800131c:	e02d      	b.n	800137a <HAL_RCC_OscConfig+0x36e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x334>
 8001326:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4a75      	ldr	r2, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	6213      	str	r3, [r2, #32]
 8001332:	4b73      	ldr	r3, [pc, #460]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4a72      	ldr	r2, [pc, #456]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	f023 0304 	bic.w	r3, r3, #4
 800133c:	6213      	str	r3, [r2, #32]
 800133e:	e01c      	b.n	800137a <HAL_RCC_OscConfig+0x36e>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b05      	cmp	r3, #5
 8001346:	d10c      	bne.n	8001362 <HAL_RCC_OscConfig+0x356>
 8001348:	4b6d      	ldr	r3, [pc, #436]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4a6c      	ldr	r2, [pc, #432]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6213      	str	r3, [r2, #32]
 8001354:	4b6a      	ldr	r3, [pc, #424]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a69      	ldr	r2, [pc, #420]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	e00b      	b.n	800137a <HAL_RCC_OscConfig+0x36e>
 8001362:	4b67      	ldr	r3, [pc, #412]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	4a66      	ldr	r2, [pc, #408]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	6213      	str	r3, [r2, #32]
 800136e:	4b64      	ldr	r3, [pc, #400]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4a63      	ldr	r2, [pc, #396]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	f023 0304 	bic.w	r3, r3, #4
 8001378:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d015      	beq.n	80013ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001382:	f7ff fae7 	bl	8000954 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001388:	e00a      	b.n	80013a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff fae3 	bl	8000954 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f241 3288 	movw	r2, #5000	; 0x1388
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0ab      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a0:	4b57      	ldr	r3, [pc, #348]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0ee      	beq.n	800138a <HAL_RCC_OscConfig+0x37e>
 80013ac:	e014      	b.n	80013d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fad1 	bl	8000954 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b6:	f7ff facd 	bl	8000954 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e095      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013cc:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1ee      	bne.n	80013b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d105      	bne.n	80013ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013de:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a47      	ldr	r2, [pc, #284]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8081 	beq.w	80014f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f4:	4b42      	ldr	r3, [pc, #264]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d061      	beq.n	80014c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d146      	bne.n	8001496 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001408:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <HAL_RCC_OscConfig+0x4fc>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff faa1 	bl	8000954 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001416:	f7ff fa9d 	bl	8000954 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e067      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001428:	4b35      	ldr	r3, [pc, #212]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143c:	d108      	bne.n	8001450 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	492d      	ldr	r1, [pc, #180]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a19      	ldr	r1, [r3, #32]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	430b      	orrs	r3, r1
 8001462:	4927      	ldr	r1, [pc, #156]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <HAL_RCC_OscConfig+0x4fc>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fa71 	bl	8000954 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fa6d 	bl	8000954 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e037      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x46a>
 8001494:	e02f      	b.n	80014f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <HAL_RCC_OscConfig+0x4fc>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fa5a 	bl	8000954 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fa56 	bl	8000954 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e020      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x498>
 80014c2:	e018      	b.n	80014f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e013      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_OscConfig+0x4f4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	40007000 	.word	0x40007000
 8001508:	42420060 	.word	0x42420060

0800150c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0d0      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d910      	bls.n	8001550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b67      	ldr	r3, [pc, #412]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 0207 	bic.w	r2, r3, #7
 8001536:	4965      	ldr	r1, [pc, #404]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b63      	ldr	r3, [pc, #396]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0b8      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001568:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001572:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001580:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800158a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800158c:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	494d      	ldr	r1, [pc, #308]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	4313      	orrs	r3, r2
 800159c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d040      	beq.n	800162c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d115      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e07f      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e073      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e06b      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f023 0203 	bic.w	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4936      	ldr	r1, [pc, #216]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015fc:	f7ff f9aa 	bl	8000954 <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	e00a      	b.n	800161a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001604:	f7ff f9a6 	bl	8000954 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e053      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 020c 	and.w	r2, r3, #12
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	429a      	cmp	r2, r3
 800162a:	d1eb      	bne.n	8001604 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d210      	bcs.n	800165c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 0207 	bic.w	r2, r3, #7
 8001642:	4922      	ldr	r1, [pc, #136]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e032      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4916      	ldr	r1, [pc, #88]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d009      	beq.n	800169a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	490e      	ldr	r1, [pc, #56]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800169a:	f000 f821 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 800169e:	4601      	mov	r1, r0
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_RCC_ClockConfig+0x1c8>)
 80016ac:	5cd3      	ldrb	r3, [r2, r3]
 80016ae:	fa21 f303 	lsr.w	r3, r1, r3
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1cc>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_ClockConfig+0x1d0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f83e 	bl	800073c <HAL_InitTick>

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	0800540c 	.word	0x0800540c
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e0:	b490      	push	{r4, r7}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016e8:	1d3c      	adds	r4, r7, #4
 80016ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b04      	cmp	r3, #4
 8001718:	d002      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x40>
 800171a:	2b08      	cmp	r3, #8
 800171c:	d003      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x46>
 800171e:	e02d      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001722:	623b      	str	r3, [r7, #32]
      break;
 8001724:	e02d      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001732:	4413      	add	r3, r2
 8001734:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001738:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	0c5b      	lsrs	r3, r3, #17
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001752:	4413      	add	r3, r2
 8001754:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001758:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_RCC_GetSysClockFreq+0xbc>)
 800175e:	fb02 f203 	mul.w	r2, r2, r3
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	fbb2 f3f3 	udiv	r3, r2, r3
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
 800176a:	e004      	b.n	8001776 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	623b      	str	r3, [r7, #32]
      break;
 800177a:	e002      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_RCC_GetSysClockFreq+0xbc>)
 800177e:	623b      	str	r3, [r7, #32]
      break;
 8001780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001782:	6a3b      	ldr	r3, [r7, #32]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bc90      	pop	{r4, r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	080053f0 	.word	0x080053f0
 8001794:	08005400 	.word	0x08005400
 8001798:	40021000 	.word	0x40021000
 800179c:	007a1200 	.word	0x007a1200
 80017a0:	003d0900 	.word	0x003d0900

080017a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	20000000 	.word	0x20000000

080017b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017bc:	f7ff fff2 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017c0:	4601      	mov	r1, r0
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000
 80017dc:	0800541c 	.word	0x0800541c

080017e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017e8:	4601      	mov	r1, r0
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	0adb      	lsrs	r3, r3, #11
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	4a03      	ldr	r2, [pc, #12]	; (8001804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
 80017f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	0800541c 	.word	0x0800541c

08001808 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	220f      	movs	r2, #15
 8001816:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_RCC_GetClockConfig+0x58>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0203 	and.w	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_RCC_GetClockConfig+0x58>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_GetClockConfig+0x58>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_RCC_GetClockConfig+0x58>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_RCC_GetClockConfig+0x5c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0207 	and.w	r2, r3, #7
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40021000 	.word	0x40021000
 8001864:	40022000 	.word	0x40022000

08001868 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <RCC_Delay+0x34>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <RCC_Delay+0x38>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0a5b      	lsrs	r3, r3, #9
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001884:	bf00      	nop
  }
  while (Delay --);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1e5a      	subs	r2, r3, #1
 800188a:	60fa      	str	r2, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f9      	bne.n	8001884 <RCC_Delay+0x1c>
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000000 	.word	0x20000000
 80018a0:	10624dd3 	.word	0x10624dd3

080018a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e041      	b.n	800193a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f839 	bl	8001942 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3304      	adds	r3, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4610      	mov	r0, r2
 80018e4:	f000 f9c2 	bl	8001c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d001      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e044      	b.n	80019f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_TIM_Base_Start_IT+0xac>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d018      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <HAL_TIM_Base_Start_IT+0xb0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d013      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a0:	d00e      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <HAL_TIM_Base_Start_IT+0xb4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d009      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <HAL_TIM_Base_Start_IT+0xb8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d004      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x6c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <HAL_TIM_Base_Start_IT+0xbc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d111      	bne.n	80019e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d010      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0201 	orr.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e2:	e007      	b.n	80019f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0201 	orr.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	40012c00 	.word	0x40012c00
 8001a04:	40013400 	.word	0x40013400
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40000800 	.word	0x40000800
 8001a10:	40000c00 	.word	0x40000c00

08001a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d122      	bne.n	8001a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d11b      	bne.n	8001a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0202 	mvn.w	r2, #2
 8001a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f8ed 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 8001a5c:	e005      	b.n	8001a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8e0 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f8ef 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d122      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f06f 0204 	mvn.w	r2, #4
 8001a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8c3 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 8001ab0:	e005      	b.n	8001abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8b6 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f8c5 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d122      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d11b      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0208 	mvn.w	r2, #8
 8001ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2204      	movs	r2, #4
 8001aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f899 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 8001b04:	e005      	b.n	8001b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f88c 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f89b 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	d122      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d11b      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0210 	mvn.w	r2, #16
 8001b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2208      	movs	r2, #8
 8001b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f86f 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 8001b58:	e005      	b.n	8001b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f862 	bl	8001c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f871 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d10e      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0201 	mvn.w	r2, #1
 8001b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7fe fd2e 	bl	80005f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba2:	2b80      	cmp	r3, #128	; 0x80
 8001ba4:	d10e      	bne.n	8001bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb0:	2b80      	cmp	r3, #128	; 0x80
 8001bb2:	d107      	bne.n	8001bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8d7 	bl	8001d72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bce:	2b40      	cmp	r3, #64	; 0x40
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bdc:	2b40      	cmp	r3, #64	; 0x40
 8001bde:	d107      	bne.n	8001bf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f835 	bl	8001c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	d10e      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d107      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0220 	mvn.w	r2, #32
 8001c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8a2 	bl	8001d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a33      	ldr	r2, [pc, #204]	; (8001d4c <TIM_Base_SetConfig+0xe0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <TIM_Base_SetConfig+0x40>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <TIM_Base_SetConfig+0xe4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00f      	beq.n	8001cac <TIM_Base_SetConfig+0x40>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c92:	d00b      	beq.n	8001cac <TIM_Base_SetConfig+0x40>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a2f      	ldr	r2, [pc, #188]	; (8001d54 <TIM_Base_SetConfig+0xe8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <TIM_Base_SetConfig+0x40>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a2e      	ldr	r2, [pc, #184]	; (8001d58 <TIM_Base_SetConfig+0xec>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d003      	beq.n	8001cac <TIM_Base_SetConfig+0x40>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a2d      	ldr	r2, [pc, #180]	; (8001d5c <TIM_Base_SetConfig+0xf0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d108      	bne.n	8001cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a22      	ldr	r2, [pc, #136]	; (8001d4c <TIM_Base_SetConfig+0xe0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <TIM_Base_SetConfig+0x82>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <TIM_Base_SetConfig+0xe4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00f      	beq.n	8001cee <TIM_Base_SetConfig+0x82>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd4:	d00b      	beq.n	8001cee <TIM_Base_SetConfig+0x82>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <TIM_Base_SetConfig+0xe8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <TIM_Base_SetConfig+0x82>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <TIM_Base_SetConfig+0xec>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d003      	beq.n	8001cee <TIM_Base_SetConfig+0x82>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <TIM_Base_SetConfig+0xf0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d108      	bne.n	8001d00 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <TIM_Base_SetConfig+0xe0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d003      	beq.n	8001d34 <TIM_Base_SetConfig+0xc8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <TIM_Base_SetConfig+0xe4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d103      	bne.n	8001d3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	615a      	str	r2, [r3, #20]
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40012c00 	.word	0x40012c00
 8001d50:	40013400 	.word	0x40013400
 8001d54:	40000400 	.word	0x40000400
 8001d58:	40000800 	.word	0x40000800
 8001d5c:	40000c00 	.word	0x40000c00

08001d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e03f      	b.n	8001e16 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe fc72 	bl	8000694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2224      	movs	r2, #36	; 0x24
 8001db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fb2f 	bl	800242c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b08a      	sub	sp, #40	; 0x28
 8001e22:	af02      	add	r7, sp, #8
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d17c      	bne.n	8001f38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <HAL_UART_Transmit+0x2c>
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e075      	b.n	8001f3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_UART_Transmit+0x3e>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e06e      	b.n	8001f3a <HAL_UART_Transmit+0x11c>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2221      	movs	r2, #33	; 0x21
 8001e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e72:	f7fe fd6f 	bl	8000954 <HAL_GetTick>
 8001e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	88fa      	ldrh	r2, [r7, #6]
 8001e82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8c:	d108      	bne.n	8001ea0 <HAL_UART_Transmit+0x82>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d104      	bne.n	8001ea0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	e003      	b.n	8001ea8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001eb0:	e02a      	b.n	8001f08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f953 	bl	8002168 <UART_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e036      	b.n	8001f3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10b      	bne.n	8001eea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ee0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	e007      	b.n	8001efa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1cf      	bne.n	8001eb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 f923 	bl	8002168 <UART_WaitOnFlagUntilTimeout>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e006      	b.n	8001f3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e000      	b.n	8001f3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f38:	2302      	movs	r3, #2
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10d      	bne.n	8001f96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_UART_IRQHandler+0x52>
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f9cc 	bl	800232c <UART_Receive_IT>
      return;
 8001f94:	e0d1      	b.n	800213a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80b0 	beq.w	80020fe <HAL_UART_IRQHandler+0x1ba>
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_UART_IRQHandler+0x70>
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80a5 	beq.w	80020fe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_UART_IRQHandler+0x90>
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_UART_IRQHandler+0xb0>
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	f043 0202 	orr.w	r2, r3, #2
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_UART_IRQHandler+0xd0>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00f      	beq.n	800203e <HAL_UART_IRQHandler+0xfa>
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d104      	bne.n	8002032 <HAL_UART_IRQHandler+0xee>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	f043 0208 	orr.w	r2, r3, #8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d078      	beq.n	8002138 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_UART_IRQHandler+0x11c>
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f966 	bl	800232c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf14      	ite	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2300      	moveq	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_UART_IRQHandler+0x144>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d031      	beq.n	80020ec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f8b7 	bl	80021fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d023      	beq.n	80020e4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020aa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	4a21      	ldr	r2, [pc, #132]	; (8002140 <HAL_UART_IRQHandler+0x1fc>)
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fd31 	bl	8000b28 <HAL_DMA_Abort_IT>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d016      	beq.n	80020fa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020d6:	4610      	mov	r0, r2
 80020d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020da:	e00e      	b.n	80020fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f83a 	bl	8002156 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e2:	e00a      	b.n	80020fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f836 	bl	8002156 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ea:	e006      	b.n	80020fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f832 	bl	8002156 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80020f8:	e01e      	b.n	8002138 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020fa:	bf00      	nop
    return;
 80020fc:	e01c      	b.n	8002138 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_UART_IRQHandler+0x1d6>
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8a3 	bl	800225e <UART_Transmit_IT>
    return;
 8002118:	e00f      	b.n	800213a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_UART_IRQHandler+0x1f6>
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8e4 	bl	80022fc <UART_EndTransmit_IT>
    return;
 8002134:	bf00      	nop
 8002136:	e000      	b.n	800213a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002138:	bf00      	nop
  }
}
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	08002237 	.word	0x08002237

08002144 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002178:	e02c      	b.n	80021d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d028      	beq.n	80021d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <UART_WaitOnFlagUntilTimeout+0x30>
 8002188:	f7fe fbe4 	bl	8000954 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	429a      	cmp	r2, r3
 8002196:	d21d      	bcs.n	80021d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e00f      	b.n	80021f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4013      	ands	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d0c3      	beq.n	800217a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002212:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7ff ff80 	bl	8002156 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b21      	cmp	r3, #33	; 0x21
 8002270:	d13e      	bne.n	80022f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227a:	d114      	bne.n	80022a6 <UART_Transmit_IT+0x48>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d110      	bne.n	80022a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002298:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	1c9a      	adds	r2, r3, #2
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	621a      	str	r2, [r3, #32]
 80022a4:	e008      	b.n	80022b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	1c59      	adds	r1, r3, #1
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6211      	str	r1, [r2, #32]
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4619      	mov	r1, r3
 80022c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10f      	bne.n	80022ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002312:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff11 	bl	8002144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b22      	cmp	r3, #34	; 0x22
 800233e:	d170      	bne.n	8002422 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002348:	d117      	bne.n	800237a <UART_Receive_IT+0x4e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d113      	bne.n	800237a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002368:	b29a      	uxth	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	1c9a      	adds	r2, r3, #2
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
 8002378:	e026      	b.n	80023c8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238c:	d007      	beq.n	800239e <UART_Receive_IT+0x72>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10a      	bne.n	80023ac <UART_Receive_IT+0x80>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e008      	b.n	80023be <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4619      	mov	r1, r3
 80023d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d120      	bne.n	800241e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0220 	bic.w	r2, r2, #32
 80023ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7fe f811 	bl	800043c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e002      	b.n	8002424 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002466:	f023 030c 	bic.w	r3, r3, #12
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	430b      	orrs	r3, r1
 8002472:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a2c      	ldr	r2, [pc, #176]	; (8002540 <UART_SetConfig+0x114>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d103      	bne.n	800249c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002494:	f7ff f9a4 	bl	80017e0 <HAL_RCC_GetPCLK2Freq>
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	e002      	b.n	80024a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800249c:	f7ff f98c 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 80024a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009a      	lsls	r2, r3, #2
 80024ac:	441a      	add	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	4a22      	ldr	r2, [pc, #136]	; (8002544 <UART_SetConfig+0x118>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	0119      	lsls	r1, r3, #4
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	009a      	lsls	r2, r3, #2
 80024cc:	441a      	add	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <UART_SetConfig+0x118>)
 80024da:	fba3 0302 	umull	r0, r3, r3, r2
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	2064      	movs	r0, #100	; 0x64
 80024e2:	fb00 f303 	mul.w	r3, r0, r3
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	3332      	adds	r3, #50	; 0x32
 80024ec:	4a15      	ldr	r2, [pc, #84]	; (8002544 <UART_SetConfig+0x118>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f8:	4419      	add	r1, r3
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	009a      	lsls	r2, r3, #2
 8002504:	441a      	add	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <UART_SetConfig+0x118>)
 8002512:	fba3 0302 	umull	r0, r3, r3, r2
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2064      	movs	r0, #100	; 0x64
 800251a:	fb00 f303 	mul.w	r3, r0, r3
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	3332      	adds	r3, #50	; 0x32
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <UART_SetConfig+0x118>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	f003 020f 	and.w	r2, r3, #15
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	440a      	add	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40013800 	.word	0x40013800
 8002544:	51eb851f 	.word	0x51eb851f

08002548 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255a:	2b84      	cmp	r3, #132	; 0x84
 800255c:	d005      	beq.n	800256a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800255e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4413      	add	r3, r2
 8002566:	3303      	adds	r3, #3
 8002568:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800257c:	f3ef 8305 	mrs	r3, IPSR
 8002580:	607b      	str	r3, [r7, #4]
  return(result);
 8002582:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800259c:	f001 f9bc 	bl	8003918 <vTaskStartScheduler>
  
  return osOK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a8:	b089      	sub	sp, #36	; 0x24
 80025aa:	af04      	add	r7, sp, #16
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <osThreadCreate+0x54>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01c      	beq.n	80025fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685c      	ldr	r4, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681d      	ldr	r5, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691e      	ldr	r6, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ffb8 	bl	8002548 <makeFreeRtosPriority>
 80025d8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025e2:	9202      	str	r2, [sp, #8]
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	9100      	str	r1, [sp, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4632      	mov	r2, r6
 80025ec:	4629      	mov	r1, r5
 80025ee:	4620      	mov	r0, r4
 80025f0:	f000 ffd7 	bl	80035a2 <xTaskCreateStatic>
 80025f4:	4603      	mov	r3, r0
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e01c      	b.n	8002634 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685c      	ldr	r4, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002606:	b29e      	uxth	r6, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff9a 	bl	8002548 <makeFreeRtosPriority>
 8002614:	4602      	mov	r2, r0
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	9200      	str	r2, [sp, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	4632      	mov	r2, r6
 8002622:	4629      	mov	r1, r5
 8002624:	4620      	mov	r0, r4
 8002626:	f001 f815 	bl	8003654 <xTaskCreate>
 800262a:	4603      	mov	r3, r0
 800262c:	2b01      	cmp	r3, #1
 800262e:	d001      	beq.n	8002634 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800263e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <osDelay+0x16>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	e000      	b.n	8002656 <osDelay+0x18>
 8002654:	2301      	movs	r3, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f001 f92a 	bl	80038b0 <vTaskDelay>
  
  return osOK;
 800265c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	3303      	adds	r3, #3
 8002674:	f023 0303 	bic.w	r3, r3, #3
 8002678:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800267a:	2014      	movs	r0, #20
 800267c:	f002 f832 	bl	80046e4 <pvPortMalloc>
 8002680:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d046      	beq.n	8002716 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 f81f 	bl	80046e4 <pvPortMalloc>
 80026a6:	4602      	mov	r2, r0
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d02b      	beq.n	800270c <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 f810 	bl	80046e4 <pvPortMalloc>
 80026c4:	4602      	mov	r2, r0
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d011      	beq.n	80026f6 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	e008      	b.n	80026ea <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	3301      	adds	r3, #1
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d3f1      	bcc.n	80026d8 <osPoolCreate+0x72>
 80026f4:	e00f      	b.n	8002716 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f002 f8b4 	bl	8004868 <vPortFree>
        vPortFree(thePool);
 8002700:	6978      	ldr	r0, [r7, #20]
 8002702:	f002 f8b1 	bl	8004868 <vPortFree>
        thePool = NULL;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e004      	b.n	8002716 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	f002 f8ab 	bl	8004868 <vPortFree>
      thePool = NULL;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8002716:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8002730:	f7ff ff21 	bl	8002576 <inHandlerMode>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00e      	beq.n	8002758 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800273a:	f3ef 8211 	mrs	r2, BASEPRI
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	617a      	str	r2, [r7, #20]
 8002750:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002752:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e001      	b.n	800275c <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8002758:	f001 fece 	bl	80044f8 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	e029      	b.n	80027b6 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	4413      	add	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6892      	ldr	r2, [r2, #8]
 800276e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002772:	fb02 f201 	mul.w	r2, r2, r1
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4413      	add	r3, r2
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d113      	bne.n	80027b0 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4619      	mov	r1, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	440b      	add	r3, r1
 80027a6:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	611a      	str	r2, [r3, #16]
      break;
 80027ae:	e007      	b.n	80027c0 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3301      	adds	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3d0      	bcc.n	8002762 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80027c0:	f7ff fed9 	bl	8002576 <inHandlerMode>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	e001      	b.n	80027da <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80027d6:	f001 febd 	bl	8004554 <vPortExitCritical>
  }
  
  return p;
 80027da:	6a3b      	ldr	r3, [r7, #32]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3728      	adds	r7, #40	; 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <osPoolFree+0x14>
    return osErrorParameter;
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	e030      	b.n	800285a <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <osPoolFree+0x1e>
    return osErrorParameter;
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	e02b      	b.n	800285a <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d201      	bcs.n	8002810 <osPoolFree+0x2c>
    return osErrorParameter;
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	e024      	b.n	800285a <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	fbb3 f1f2 	udiv	r1, r3, r2
 8002824:	fb02 f201 	mul.w	r2, r2, r1
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <osPoolFree+0x4e>
    return osErrorParameter;
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	e013      	b.n	800285a <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d301      	bcc.n	800284c <osPoolFree+0x68>
    return osErrorParameter;
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	e006      	b.n	800285a <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689c      	ldr	r4, [r3, #8]
 8002882:	200c      	movs	r0, #12
 8002884:	f001 ff2e 	bl	80046e4 <pvPortMalloc>
 8002888:	4603      	mov	r3, r0
 800288a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <osMailCreate+0x36>
    return NULL;
 8002896:	2300      	movs	r3, #0
 8002898:	e038      	b.n	800290c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	681c      	ldr	r4, [r3, #0]
 80028ae:	2200      	movs	r2, #0
 80028b0:	2104      	movs	r1, #4
 80028b2:	f000 fa23 	bl	8002cfc <xQueueGenericCreate>
 80028b6:	4603      	mov	r3, r0
 80028b8:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d107      	bne.n	80028d6 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 ffcb 	bl	8004868 <vPortFree>
    return NULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e01a      	b.n	800290c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	681c      	ldr	r4, [r3, #0]
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fec0 	bl	8002666 <osPoolCreate>
 80028e6:	4603      	mov	r3, r0
 80028e8:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d107      	bne.n	8002906 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f001 ffb3 	bl	8004868 <vPortFree>
    return NULL;
 8002902:	2300      	movs	r3, #0
 8002904:	e002      	b.n	800290c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800290c:	4618      	mov	r0, r3
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd90      	pop	{r4, r7, pc}

08002914 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <osMailAlloc+0x14>
    return NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	e006      	b.n	8002936 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fef7 	bl	8002720 <osPoolAlloc>
 8002932:	60f8      	str	r0, [r7, #12]
  
  return p;
 8002934:	68fb      	ldr	r3, [r7, #12]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <osMailPut+0x14>
    return osErrorParameter;
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	e02c      	b.n	80029ae <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8002958:	f7ff fe0d 	bl	8002576 <inHandlerMode>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d018      	beq.n	8002994 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6858      	ldr	r0, [r3, #4]
 8002966:	f107 020c 	add.w	r2, r7, #12
 800296a:	4639      	mov	r1, r7
 800296c:	2300      	movs	r3, #0
 800296e:	f000 fb1b 	bl	8002fa8 <xQueueGenericSendFromISR>
 8002972:	4603      	mov	r3, r0
 8002974:	2b01      	cmp	r3, #1
 8002976:	d001      	beq.n	800297c <osMailPut+0x3c>
      return osErrorOS;
 8002978:	23ff      	movs	r3, #255	; 0xff
 800297a:	e018      	b.n	80029ae <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d014      	beq.n	80029ac <osMailPut+0x6c>
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <osMailPut+0x78>)
 8002984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	e00b      	b.n	80029ac <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6858      	ldr	r0, [r3, #4]
 8002998:	4639      	mov	r1, r7
 800299a:	2300      	movs	r3, #0
 800299c:	2200      	movs	r2, #0
 800299e:	f000 fa09 	bl	8002db4 <xQueueGenericSend>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d001      	beq.n	80029ac <osMailPut+0x6c>
      return osErrorOS;
 80029a8:	23ff      	movs	r3, #255	; 0xff
 80029aa:	e000      	b.n	80029ae <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	e000ed04 	.word	0xe000ed04

080029bc <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b08b      	sub	sp, #44	; 0x2c
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	617b      	str	r3, [r7, #20]
    return event;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	461c      	mov	r4, r3
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029e6:	e056      	b.n	8002a96 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f6:	d103      	bne.n	8002a00 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	e009      	b.n	8002a14 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <osMailGet+0x58>
      ticks = 1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002a14:	f7ff fdaf 	bl	8002576 <inHandlerMode>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01d      	beq.n	8002a5a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6858      	ldr	r0, [r3, #4]
 8002a22:	f107 0220 	add.w	r2, r7, #32
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f000 fc2b 	bl	8003288 <xQueueReceiveFromISR>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d102      	bne.n	8002a3e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	e001      	b.n	8002a42 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01e      	beq.n	8002a86 <osMailGet+0xca>
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <osMailGet+0xe4>)
 8002a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	e015      	b.n	8002a86 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6858      	ldr	r0, [r3, #4]
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	3304      	adds	r3, #4
 8002a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a66:	4619      	mov	r1, r3
 8002a68:	f000 fb32 	bl	80030d0 <xQueueReceive>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d102      	bne.n	8002a78 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8002a72:	2320      	movs	r3, #32
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e006      	b.n	8002a86 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <osMailGet+0xc6>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e000      	b.n	8002a84 <osMailGet+0xc8>
 8002a82:	2340      	movs	r3, #64	; 0x40
 8002a84:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	461c      	mov	r4, r3
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	372c      	adds	r7, #44	; 0x2c
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000ed04 	.word	0xe000ed04

08002aa4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <osMailFree+0x14>
    return osErrorParameter;
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	e006      	b.n	8002ac6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	6839      	ldr	r1, [r7, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fe90 	bl	80027e4 <osPoolFree>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f103 0208 	add.w	r2, r3, #8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f103 0208 	add.w	r2, r3, #8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f103 0208 	add.w	r2, r3, #8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	601a      	str	r2, [r3, #0]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d103      	bne.n	8002b8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e00c      	b.n	8002ba4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e002      	b.n	8002b98 <vListInsert+0x2e>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d2f6      	bcs.n	8002b92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	601a      	str	r2, [r3, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6892      	ldr	r2, [r2, #8]
 8002bf0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6852      	ldr	r2, [r2, #4]
 8002bfa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d103      	bne.n	8002c0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	1e5a      	subs	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <xQueueGenericReset+0x28>
	__asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	e7fe      	b.n	8002c52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002c54:	f001 fc50 	bl	80044f8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c60:	68f9      	ldr	r1, [r7, #12]
 8002c62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	441a      	add	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	3b01      	subs	r3, #1
 8002c86:	68f9      	ldr	r1, [r7, #12]
 8002c88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	441a      	add	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	22ff      	movs	r2, #255	; 0xff
 8002c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	22ff      	movs	r2, #255	; 0xff
 8002ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d114      	bne.n	8002cd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01a      	beq.n	8002ce8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 f870 	bl	8003d9c <xTaskRemoveFromEventList>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d012      	beq.n	8002ce8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <xQueueGenericReset+0xcc>)
 8002cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	e009      	b.n	8002ce8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3310      	adds	r3, #16
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fef8 	bl	8002ace <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3324      	adds	r3, #36	; 0x24
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fef3 	bl	8002ace <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ce8:	f001 fc34 	bl	8004554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cec:	2301      	movs	r3, #1
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	4613      	mov	r3, r2
 8002d08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d109      	bne.n	8002d24 <xQueueGenericCreate+0x28>
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e7fe      	b.n	8002d22 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e004      	b.n	8002d3a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	fb02 f303 	mul.w	r3, r2, r3
 8002d38:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3348      	adds	r3, #72	; 0x48
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 fcd0 	bl	80046e4 <pvPortMalloc>
 8002d44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00f      	beq.n	8002d6c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	3348      	adds	r3, #72	; 0x48
 8002d50:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d5a:	79fa      	ldrb	r2, [r7, #7]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f805 	bl	8002d76 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
	}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e002      	b.n	8002d98 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002da4:	2101      	movs	r1, #1
 8002da6:	69b8      	ldr	r0, [r7, #24]
 8002da8:	f7ff ff40 	bl	8002c2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08e      	sub	sp, #56	; 0x38
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <xQueueGenericSend+0x30>
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	e7fe      	b.n	8002de2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d103      	bne.n	8002df2 <xQueueGenericSend+0x3e>
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <xQueueGenericSend+0x42>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <xQueueGenericSend+0x44>
 8002df6:	2300      	movs	r3, #0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <xQueueGenericSend+0x5c>
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	e7fe      	b.n	8002e0e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d103      	bne.n	8002e1e <xQueueGenericSend+0x6a>
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <xQueueGenericSend+0x6e>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <xQueueGenericSend+0x70>
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <xQueueGenericSend+0x88>
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	623b      	str	r3, [r7, #32]
 8002e3a:	e7fe      	b.n	8002e3a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e3c:	f001 f968 	bl	8004110 <xTaskGetSchedulerState>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <xQueueGenericSend+0x98>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <xQueueGenericSend+0x9c>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <xQueueGenericSend+0x9e>
 8002e50:	2300      	movs	r3, #0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <xQueueGenericSend+0xb6>
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	e7fe      	b.n	8002e68 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e6a:	f001 fb45 	bl	80044f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <xQueueGenericSend+0xcc>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d129      	bne.n	8002ed4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e86:	f000 fa7c 	bl	8003382 <prvCopyDataToQueue>
 8002e8a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d010      	beq.n	8002eb6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	3324      	adds	r3, #36	; 0x24
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 ff7f 	bl	8003d9c <xTaskRemoveFromEventList>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d013      	beq.n	8002ecc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ea4:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <xQueueGenericSend+0x1f0>)
 8002ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	e00a      	b.n	8002ecc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ebc:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <xQueueGenericSend+0x1f0>)
 8002ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ecc:	f001 fb42 	bl	8004554 <vPortExitCritical>
				return pdPASS;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e063      	b.n	8002f9c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eda:	f001 fb3b 	bl	8004554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e05c      	b.n	8002f9c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 ffb7 	bl	8003e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ef6:	f001 fb2d 	bl	8004554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002efa:	f000 fd6b 	bl	80039d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002efe:	f001 fafb 	bl	80044f8 <vPortEnterCritical>
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d103      	bne.n	8002f18 <xQueueGenericSend+0x164>
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d103      	bne.n	8002f2e <xQueueGenericSend+0x17a>
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f2e:	f001 fb11 	bl	8004554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f32:	1d3a      	adds	r2, r7, #4
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 ffa6 	bl	8003e8c <xTaskCheckForTimeOut>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d124      	bne.n	8002f90 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f48:	f000 fb13 	bl	8003572 <prvIsQueueFull>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d018      	beq.n	8002f84 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	3310      	adds	r3, #16
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fefa 	bl	8003d54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f62:	f000 fa9e 	bl	80034a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f66:	f000 fd43 	bl	80039f0 <xTaskResumeAll>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f47f af7c 	bne.w	8002e6a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <xQueueGenericSend+0x1f0>)
 8002f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	e772      	b.n	8002e6a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f86:	f000 fa8c 	bl	80034a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f8a:	f000 fd31 	bl	80039f0 <xTaskResumeAll>
 8002f8e:	e76c      	b.n	8002e6a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f92:	f000 fa86 	bl	80034a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f96:	f000 fd2b 	bl	80039f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f9a:	2300      	movs	r3, #0
		}
	}
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3738      	adds	r7, #56	; 0x38
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08e      	sub	sp, #56	; 0x38
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <xQueueGenericSendFromISR+0x2c>
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd2:	e7fe      	b.n	8002fd2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <xQueueGenericSendFromISR+0x3a>
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <xQueueGenericSendFromISR+0x3e>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <xQueueGenericSendFromISR+0x40>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <xQueueGenericSendFromISR+0x58>
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	623b      	str	r3, [r7, #32]
 8002ffe:	e7fe      	b.n	8002ffe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d103      	bne.n	800300e <xQueueGenericSendFromISR+0x66>
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <xQueueGenericSendFromISR+0x6a>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <xQueueGenericSendFromISR+0x6c>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <xQueueGenericSendFromISR+0x84>
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	e7fe      	b.n	800302a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800302c:	f001 fb1e 	bl	800466c <vPortValidateInterruptPriority>
	__asm volatile
 8003030:	f3ef 8211 	mrs	r2, BASEPRI
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	61ba      	str	r2, [r7, #24]
 8003046:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003048:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003054:	429a      	cmp	r2, r3
 8003056:	d302      	bcc.n	800305e <xQueueGenericSendFromISR+0xb6>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d12c      	bne.n	80030b8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800306e:	f000 f988 	bl	8003382 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003072:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d112      	bne.n	80030a2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2b00      	cmp	r3, #0
 8003082:	d016      	beq.n	80030b2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	3324      	adds	r3, #36	; 0x24
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fe87 	bl	8003d9c <xTaskRemoveFromEventList>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e007      	b.n	80030b2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030a6:	3301      	adds	r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	b25a      	sxtb	r2, r3
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80030b2:	2301      	movs	r3, #1
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80030b6:	e001      	b.n	80030bc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	613b      	str	r3, [r7, #16]
	__asm volatile
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3738      	adds	r7, #56	; 0x38
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08c      	sub	sp, #48	; 0x30
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030dc:	2300      	movs	r3, #0
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <xQueueReceive+0x2e>
	__asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	623b      	str	r3, [r7, #32]
 80030fc:	e7fe      	b.n	80030fc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <xQueueReceive+0x3c>
 8003104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <xQueueReceive+0x40>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <xQueueReceive+0x42>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <xQueueReceive+0x5a>
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	e7fe      	b.n	8003128 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800312a:	f000 fff1 	bl	8004110 <xTaskGetSchedulerState>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <xQueueReceive+0x6a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <xQueueReceive+0x6e>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <xQueueReceive+0x70>
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d109      	bne.n	8003158 <xQueueReceive+0x88>
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	e7fe      	b.n	8003156 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003158:	f001 f9ce 	bl	80044f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01f      	beq.n	80031a8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800316c:	f000 f973 	bl	8003456 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	1e5a      	subs	r2, r3, #1
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00f      	beq.n	80031a0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	3310      	adds	r3, #16
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fe09 	bl	8003d9c <xTaskRemoveFromEventList>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003190:	4b3c      	ldr	r3, [pc, #240]	; (8003284 <xQueueReceive+0x1b4>)
 8003192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031a0:	f001 f9d8 	bl	8004554 <vPortExitCritical>
				return pdPASS;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e069      	b.n	800327c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031ae:	f001 f9d1 	bl	8004554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e062      	b.n	800327c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d106      	bne.n	80031ca <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031bc:	f107 0310 	add.w	r3, r7, #16
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fe4d 	bl	8003e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031c6:	2301      	movs	r3, #1
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031ca:	f001 f9c3 	bl	8004554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031ce:	f000 fc01 	bl	80039d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031d2:	f001 f991 	bl	80044f8 <vPortEnterCritical>
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031dc:	b25b      	sxtb	r3, r3
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d103      	bne.n	80031ec <xQueueReceive+0x11c>
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d103      	bne.n	8003202 <xQueueReceive+0x132>
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003202:	f001 f9a7 	bl	8004554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003206:	1d3a      	adds	r2, r7, #4
 8003208:	f107 0310 	add.w	r3, r7, #16
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fe3c 	bl	8003e8c <xTaskCheckForTimeOut>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d123      	bne.n	8003262 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800321a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800321c:	f000 f993 	bl	8003546 <prvIsQueueEmpty>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d017      	beq.n	8003256 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	3324      	adds	r3, #36	; 0x24
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fd90 	bl	8003d54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003236:	f000 f934 	bl	80034a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800323a:	f000 fbd9 	bl	80039f0 <xTaskResumeAll>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d189      	bne.n	8003158 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <xQueueReceive+0x1b4>)
 8003246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	e780      	b.n	8003158 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003258:	f000 f923 	bl	80034a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800325c:	f000 fbc8 	bl	80039f0 <xTaskResumeAll>
 8003260:	e77a      	b.n	8003158 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003264:	f000 f91d 	bl	80034a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003268:	f000 fbc2 	bl	80039f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800326c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800326e:	f000 f96a 	bl	8003546 <prvIsQueueEmpty>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	f43f af6f 	beq.w	8003158 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800327a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800327c:	4618      	mov	r0, r3
 800327e:	3730      	adds	r7, #48	; 0x30
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	e000ed04 	.word	0xe000ed04

08003288 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08e      	sub	sp, #56	; 0x38
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <xQueueReceiveFromISR+0x2a>
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	623b      	str	r3, [r7, #32]
 80032b0:	e7fe      	b.n	80032b0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <xQueueReceiveFromISR+0x38>
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <xQueueReceiveFromISR+0x3c>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <xQueueReceiveFromISR+0x3e>
 80032c4:	2300      	movs	r3, #0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <xQueueReceiveFromISR+0x56>
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	e7fe      	b.n	80032dc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032de:	f001 f9c5 	bl	800466c <vPortValidateInterruptPriority>
	__asm volatile
 80032e2:	f3ef 8211 	mrs	r2, BASEPRI
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	61ba      	str	r2, [r7, #24]
 80032f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80032fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	2b00      	cmp	r3, #0
 8003308:	d02f      	beq.n	800336a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003318:	f000 f89d 	bl	8003456 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	1e5a      	subs	r2, r3, #1
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003324:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d112      	bne.n	8003354 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	3310      	adds	r3, #16
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fd2e 	bl	8003d9c <xTaskRemoveFromEventList>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00e      	beq.n	8003364 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00b      	beq.n	8003364 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e007      	b.n	8003364 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003358:	3301      	adds	r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	b25a      	sxtb	r2, r3
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003364:	2301      	movs	r3, #1
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
 8003368:	e001      	b.n	800336e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800336a:	2300      	movs	r3, #0
 800336c:	637b      	str	r3, [r7, #52]	; 0x34
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800337a:	4618      	mov	r0, r3
 800337c:	3738      	adds	r7, #56	; 0x38
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d14d      	bne.n	8003444 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fecd 	bl	800414c <xTaskPriorityDisinherit>
 80033b2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	e043      	b.n	8003444 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d119      	bne.n	80033f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6898      	ldr	r0, [r3, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	461a      	mov	r2, r3
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	f001 fb87 	bl	8004ae0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	441a      	add	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d32b      	bcc.n	8003444 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	e026      	b.n	8003444 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	68d8      	ldr	r0, [r3, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	461a      	mov	r2, r3
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	f001 fb6d 	bl	8004ae0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	425b      	negs	r3, r3
 8003410:	441a      	add	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d207      	bcs.n	8003432 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	425b      	negs	r3, r3
 800342c:	441a      	add	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d105      	bne.n	8003444 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	3b01      	subs	r3, #1
 8003442:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800344c:	697b      	ldr	r3, [r7, #20]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d018      	beq.n	800349a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	d303      	bcc.n	800348a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68d9      	ldr	r1, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	461a      	mov	r2, r3
 8003494:	6838      	ldr	r0, [r7, #0]
 8003496:	f001 fb23 	bl	8004ae0 <memcpy>
	}
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034aa:	f001 f825 	bl	80044f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034b6:	e011      	b.n	80034dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3324      	adds	r3, #36	; 0x24
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fc69 	bl	8003d9c <xTaskRemoveFromEventList>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034d0:	f000 fd3c 	bl	8003f4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	dce9      	bgt.n	80034b8 <prvUnlockQueue+0x16>
 80034e4:	e000      	b.n	80034e8 <prvUnlockQueue+0x46>
					break;
 80034e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	22ff      	movs	r2, #255	; 0xff
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034f0:	f001 f830 	bl	8004554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034f4:	f001 f800 	bl	80044f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003500:	e011      	b.n	8003526 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d012      	beq.n	8003530 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3310      	adds	r3, #16
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fc44 	bl	8003d9c <xTaskRemoveFromEventList>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800351a:	f000 fd17 	bl	8003f4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800351e:	7bbb      	ldrb	r3, [r7, #14]
 8003520:	3b01      	subs	r3, #1
 8003522:	b2db      	uxtb	r3, r3
 8003524:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003526:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800352a:	2b00      	cmp	r3, #0
 800352c:	dce9      	bgt.n	8003502 <prvUnlockQueue+0x60>
 800352e:	e000      	b.n	8003532 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003530:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	22ff      	movs	r2, #255	; 0xff
 8003536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800353a:	f001 f80b 	bl	8004554 <vPortExitCritical>
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800354e:	f000 ffd3 	bl	80044f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800355a:	2301      	movs	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e001      	b.n	8003564 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003564:	f000 fff6 	bl	8004554 <vPortExitCritical>

	return xReturn;
 8003568:	68fb      	ldr	r3, [r7, #12]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800357a:	f000 ffbd 	bl	80044f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	429a      	cmp	r2, r3
 8003588:	d102      	bne.n	8003590 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800358a:	2301      	movs	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	e001      	b.n	8003594 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003594:	f000 ffde 	bl	8004554 <vPortExitCritical>

	return xReturn;
 8003598:	68fb      	ldr	r3, [r7, #12]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b08e      	sub	sp, #56	; 0x38
 80035a6:	af04      	add	r7, sp, #16
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <xTaskCreateStatic+0x28>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	623b      	str	r3, [r7, #32]
 80035c8:	e7fe      	b.n	80035c8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <xTaskCreateStatic+0x42>
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	e7fe      	b.n	80035e2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035e4:	2354      	movs	r3, #84	; 0x54
 80035e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b54      	cmp	r3, #84	; 0x54
 80035ec:	d009      	beq.n	8003602 <xTaskCreateStatic+0x60>
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	e7fe      	b.n	8003600 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01e      	beq.n	8003646 <xTaskCreateStatic+0xa4>
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01b      	beq.n	8003646 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003616:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003620:	2300      	movs	r3, #0
 8003622:	9303      	str	r3, [sp, #12]
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	9302      	str	r3, [sp, #8]
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f850 	bl	80036de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800363e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003640:	f000 f8cc 	bl	80037dc <prvAddNewTaskToReadyList>
 8003644:	e001      	b.n	800364a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800364a:	697b      	ldr	r3, [r7, #20]
	}
 800364c:	4618      	mov	r0, r3
 800364e:	3728      	adds	r7, #40	; 0x28
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	; 0x30
 8003658:	af04      	add	r7, sp, #16
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4618      	mov	r0, r3
 800366a:	f001 f83b 	bl	80046e4 <pvPortMalloc>
 800366e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00e      	beq.n	8003694 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003676:	2054      	movs	r0, #84	; 0x54
 8003678:	f001 f834 	bl	80046e4 <pvPortMalloc>
 800367c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
 800368a:	e005      	b.n	8003698 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800368c:	6978      	ldr	r0, [r7, #20]
 800368e:	f001 f8eb 	bl	8004868 <vPortFree>
 8003692:	e001      	b.n	8003698 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d017      	beq.n	80036ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036a6:	88fa      	ldrh	r2, [r7, #6]
 80036a8:	2300      	movs	r3, #0
 80036aa:	9303      	str	r3, [sp, #12]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	9302      	str	r3, [sp, #8]
 80036b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f80e 	bl	80036de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036c2:	69f8      	ldr	r0, [r7, #28]
 80036c4:	f000 f88a 	bl	80037dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036c8:	2301      	movs	r3, #1
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	e002      	b.n	80036d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036ce:	f04f 33ff 	mov.w	r3, #4294967295
 80036d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036d4:	69bb      	ldr	r3, [r7, #24]
	}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3720      	adds	r7, #32
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b088      	sub	sp, #32
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036f6:	3b01      	subs	r3, #1
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f023 0307 	bic.w	r3, r3, #7
 8003704:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <prvInitialiseNewTask+0x46>
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e7fe      	b.n	8003722 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e012      	b.n	8003750 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	4413      	add	r3, r2
 8003730:	7819      	ldrb	r1, [r3, #0]
 8003732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	3334      	adds	r3, #52	; 0x34
 800373a:	460a      	mov	r2, r1
 800373c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d006      	beq.n	8003758 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3301      	adds	r3, #1
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d9e9      	bls.n	800372a <prvInitialiseNewTask+0x4c>
 8003756:	e000      	b.n	800375a <prvInitialiseNewTask+0x7c>
		{
			break;
 8003758:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	2b06      	cmp	r3, #6
 8003766:	d901      	bls.n	800376c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003768:	2306      	movs	r3, #6
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003770:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003776:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	2200      	movs	r2, #0
 800377c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	3304      	adds	r3, #4
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff f9c2 	bl	8002b0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	3318      	adds	r3, #24
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff f9bd 	bl	8002b0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003796:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	f1c3 0207 	rsb	r2, r3, #7
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	2200      	movs	r2, #0
 80037ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	68f9      	ldr	r1, [r7, #12]
 80037ba:	69b8      	ldr	r0, [r7, #24]
 80037bc:	f000 fdb0 	bl	8004320 <pxPortInitialiseStack>
 80037c0:	4602      	mov	r2, r0
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037d2:	bf00      	nop
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037e4:	f000 fe88 	bl	80044f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037e8:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <prvAddNewTaskToReadyList+0xb8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	4a29      	ldr	r2, [pc, #164]	; (8003894 <prvAddNewTaskToReadyList+0xb8>)
 80037f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037f2:	4b29      	ldr	r3, [pc, #164]	; (8003898 <prvAddNewTaskToReadyList+0xbc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037fa:	4a27      	ldr	r2, [pc, #156]	; (8003898 <prvAddNewTaskToReadyList+0xbc>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <prvAddNewTaskToReadyList+0xb8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d110      	bne.n	800382a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003808:	f000 fbc4 	bl	8003f94 <prvInitialiseTaskLists>
 800380c:	e00d      	b.n	800382a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800380e:	4b23      	ldr	r3, [pc, #140]	; (800389c <prvAddNewTaskToReadyList+0xc0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003816:	4b20      	ldr	r3, [pc, #128]	; (8003898 <prvAddNewTaskToReadyList+0xbc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	429a      	cmp	r2, r3
 8003822:	d802      	bhi.n	800382a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003824:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <prvAddNewTaskToReadyList+0xbc>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <prvAddNewTaskToReadyList+0xc4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <prvAddNewTaskToReadyList+0xc4>)
 8003832:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	2201      	movs	r2, #1
 800383a:	409a      	lsls	r2, r3
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <prvAddNewTaskToReadyList+0xc8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4313      	orrs	r3, r2
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <prvAddNewTaskToReadyList+0xc8>)
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <prvAddNewTaskToReadyList+0xcc>)
 8003854:	441a      	add	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7ff f961 	bl	8002b24 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003862:	f000 fe77 	bl	8004554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <prvAddNewTaskToReadyList+0xc0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00e      	beq.n	800388c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <prvAddNewTaskToReadyList+0xbc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	429a      	cmp	r2, r3
 800387a:	d207      	bcs.n	800388c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <prvAddNewTaskToReadyList+0xd0>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	200004d8 	.word	0x200004d8
 8003898:	200003d8 	.word	0x200003d8
 800389c:	200004e4 	.word	0x200004e4
 80038a0:	200004f4 	.word	0x200004f4
 80038a4:	200004e0 	.word	0x200004e0
 80038a8:	200003dc 	.word	0x200003dc
 80038ac:	e000ed04 	.word	0xe000ed04

080038b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d016      	beq.n	80038f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <vTaskDelay+0x60>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <vTaskDelay+0x2e>
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	e7fe      	b.n	80038dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80038de:	f000 f879 	bl	80039d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038e2:	2100      	movs	r1, #0
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fcb5 	bl	8004254 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038ea:	f000 f881 	bl	80039f0 <xTaskResumeAll>
 80038ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <vTaskDelay+0x64>)
 80038f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000500 	.word	0x20000500
 8003914:	e000ed04 	.word	0xe000ed04

08003918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003926:	463a      	mov	r2, r7
 8003928:	1d39      	adds	r1, r7, #4
 800392a:	f107 0308 	add.w	r3, r7, #8
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fc86 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003934:	6839      	ldr	r1, [r7, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	9202      	str	r2, [sp, #8]
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	2300      	movs	r3, #0
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	2300      	movs	r3, #0
 8003944:	460a      	mov	r2, r1
 8003946:	491d      	ldr	r1, [pc, #116]	; (80039bc <vTaskStartScheduler+0xa4>)
 8003948:	481d      	ldr	r0, [pc, #116]	; (80039c0 <vTaskStartScheduler+0xa8>)
 800394a:	f7ff fe2a 	bl	80035a2 <xTaskCreateStatic>
 800394e:	4602      	mov	r2, r0
 8003950:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <vTaskStartScheduler+0xac>)
 8003952:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <vTaskStartScheduler+0xac>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800395c:	2301      	movs	r3, #1
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	e001      	b.n	8003966 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d115      	bne.n	8003998 <vTaskStartScheduler+0x80>
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <vTaskStartScheduler+0xb0>)
 8003980:	f04f 32ff 	mov.w	r2, #4294967295
 8003984:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <vTaskStartScheduler+0xb4>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <vTaskStartScheduler+0xb8>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003992:	f000 fd41 	bl	8004418 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003996:	e00d      	b.n	80039b4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d109      	bne.n	80039b4 <vTaskStartScheduler+0x9c>
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e7fe      	b.n	80039b2 <vTaskStartScheduler+0x9a>
}
 80039b4:	bf00      	nop
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	08005404 	.word	0x08005404
 80039c0:	08003f65 	.word	0x08003f65
 80039c4:	200004fc 	.word	0x200004fc
 80039c8:	200004f8 	.word	0x200004f8
 80039cc:	200004e4 	.word	0x200004e4
 80039d0:	200004dc 	.word	0x200004dc

080039d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80039d8:	4b04      	ldr	r3, [pc, #16]	; (80039ec <vTaskSuspendAll+0x18>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	4a03      	ldr	r2, [pc, #12]	; (80039ec <vTaskSuspendAll+0x18>)
 80039e0:	6013      	str	r3, [r2, #0]
}
 80039e2:	bf00      	nop
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000500 	.word	0x20000500

080039f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039fe:	4b41      	ldr	r3, [pc, #260]	; (8003b04 <xTaskResumeAll+0x114>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <xTaskResumeAll+0x2a>
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	e7fe      	b.n	8003a18 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a1a:	f000 fd6d 	bl	80044f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a1e:	4b39      	ldr	r3, [pc, #228]	; (8003b04 <xTaskResumeAll+0x114>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	4a37      	ldr	r2, [pc, #220]	; (8003b04 <xTaskResumeAll+0x114>)
 8003a26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a28:	4b36      	ldr	r3, [pc, #216]	; (8003b04 <xTaskResumeAll+0x114>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d161      	bne.n	8003af4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a30:	4b35      	ldr	r3, [pc, #212]	; (8003b08 <xTaskResumeAll+0x118>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d05d      	beq.n	8003af4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a38:	e02e      	b.n	8003a98 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a3a:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <xTaskResumeAll+0x11c>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3318      	adds	r3, #24
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff f8c7 	bl	8002bda <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff f8c2 	bl	8002bda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	4b2c      	ldr	r3, [pc, #176]	; (8003b10 <xTaskResumeAll+0x120>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	4a2a      	ldr	r2, [pc, #168]	; (8003b10 <xTaskResumeAll+0x120>)
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <xTaskResumeAll+0x124>)
 8003a76:	441a      	add	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f7ff f850 	bl	8002b24 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <xTaskResumeAll+0x128>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d302      	bcc.n	8003a98 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003a92:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <xTaskResumeAll+0x12c>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a98:	4b1c      	ldr	r3, [pc, #112]	; (8003b0c <xTaskResumeAll+0x11c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1cc      	bne.n	8003a3a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003aa6:	f000 fb0f 	bl	80040c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <xTaskResumeAll+0x130>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d010      	beq.n	8003ad8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ab6:	f000 f837 	bl	8003b28 <xTaskIncrementTick>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003ac0:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <xTaskResumeAll+0x12c>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f1      	bne.n	8003ab6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <xTaskResumeAll+0x130>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <xTaskResumeAll+0x12c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d009      	beq.n	8003af4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <xTaskResumeAll+0x134>)
 8003ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003af4:	f000 fd2e 	bl	8004554 <vPortExitCritical>

	return xAlreadyYielded;
 8003af8:	68bb      	ldr	r3, [r7, #8]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000500 	.word	0x20000500
 8003b08:	200004d8 	.word	0x200004d8
 8003b0c:	20000498 	.word	0x20000498
 8003b10:	200004e0 	.word	0x200004e0
 8003b14:	200003dc 	.word	0x200003dc
 8003b18:	200003d8 	.word	0x200003d8
 8003b1c:	200004ec 	.word	0x200004ec
 8003b20:	200004e8 	.word	0x200004e8
 8003b24:	e000ed04 	.word	0xe000ed04

08003b28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b32:	4b50      	ldr	r3, [pc, #320]	; (8003c74 <xTaskIncrementTick+0x14c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f040 808c 	bne.w	8003c54 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b3c:	4b4e      	ldr	r3, [pc, #312]	; (8003c78 <xTaskIncrementTick+0x150>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b44:	4a4c      	ldr	r2, [pc, #304]	; (8003c78 <xTaskIncrementTick+0x150>)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11f      	bne.n	8003b90 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b50:	4b4a      	ldr	r3, [pc, #296]	; (8003c7c <xTaskIncrementTick+0x154>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <xTaskIncrementTick+0x46>
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	e7fe      	b.n	8003b6c <xTaskIncrementTick+0x44>
 8003b6e:	4b43      	ldr	r3, [pc, #268]	; (8003c7c <xTaskIncrementTick+0x154>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	4b42      	ldr	r3, [pc, #264]	; (8003c80 <xTaskIncrementTick+0x158>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a40      	ldr	r2, [pc, #256]	; (8003c7c <xTaskIncrementTick+0x154>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4a40      	ldr	r2, [pc, #256]	; (8003c80 <xTaskIncrementTick+0x158>)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b40      	ldr	r3, [pc, #256]	; (8003c84 <xTaskIncrementTick+0x15c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	4a3e      	ldr	r2, [pc, #248]	; (8003c84 <xTaskIncrementTick+0x15c>)
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	f000 fa9c 	bl	80040c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b90:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <xTaskIncrementTick+0x160>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d34d      	bcc.n	8003c36 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b9a:	4b38      	ldr	r3, [pc, #224]	; (8003c7c <xTaskIncrementTick+0x154>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <xTaskIncrementTick+0x80>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <xTaskIncrementTick+0x82>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bae:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <xTaskIncrementTick+0x160>)
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb4:	601a      	str	r2, [r3, #0]
					break;
 8003bb6:	e03e      	b.n	8003c36 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bb8:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <xTaskIncrementTick+0x154>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d203      	bcs.n	8003bd8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bd0:	4a2d      	ldr	r2, [pc, #180]	; (8003c88 <xTaskIncrementTick+0x160>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6013      	str	r3, [r2, #0]
						break;
 8003bd6:	e02e      	b.n	8003c36 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fffc 	bl	8002bda <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	3318      	adds	r3, #24
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fff3 	bl	8002bda <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <xTaskIncrementTick+0x164>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <xTaskIncrementTick+0x164>)
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <xTaskIncrementTick+0x168>)
 8003c14:	441a      	add	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f7fe ff81 	bl	8002b24 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c26:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <xTaskIncrementTick+0x16c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d3b4      	bcc.n	8003b9a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003c30:	2301      	movs	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c34:	e7b1      	b.n	8003b9a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c36:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <xTaskIncrementTick+0x16c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	4914      	ldr	r1, [pc, #80]	; (8003c90 <xTaskIncrementTick+0x168>)
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d907      	bls.n	8003c5e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e004      	b.n	8003c5e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c54:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <xTaskIncrementTick+0x170>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	4a0f      	ldr	r2, [pc, #60]	; (8003c98 <xTaskIncrementTick+0x170>)
 8003c5c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <xTaskIncrementTick+0x174>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c6a:	697b      	ldr	r3, [r7, #20]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20000500 	.word	0x20000500
 8003c78:	200004dc 	.word	0x200004dc
 8003c7c:	20000490 	.word	0x20000490
 8003c80:	20000494 	.word	0x20000494
 8003c84:	200004f0 	.word	0x200004f0
 8003c88:	200004f8 	.word	0x200004f8
 8003c8c:	200004e0 	.word	0x200004e0
 8003c90:	200003dc 	.word	0x200003dc
 8003c94:	200003d8 	.word	0x200003d8
 8003c98:	200004e8 	.word	0x200004e8
 8003c9c:	200004ec 	.word	0x200004ec

08003ca0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <vTaskSwitchContext+0xa0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cae:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <vTaskSwitchContext+0xa4>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cb4:	e03e      	b.n	8003d34 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003cb6:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <vTaskSwitchContext+0xa4>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003cbc:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <vTaskSwitchContext+0xa8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003cca:	7afb      	ldrb	r3, [r7, #11]
 8003ccc:	f1c3 031f 	rsb	r3, r3, #31
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	491e      	ldr	r1, [pc, #120]	; (8003d4c <vTaskSwitchContext+0xac>)
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <vTaskSwitchContext+0x5a>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	607b      	str	r3, [r7, #4]
 8003cf8:	e7fe      	b.n	8003cf8 <vTaskSwitchContext+0x58>
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <vTaskSwitchContext+0xac>)
 8003d06:	4413      	add	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d104      	bne.n	8003d2a <vTaskSwitchContext+0x8a>
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <vTaskSwitchContext+0xb0>)
 8003d32:	6013      	str	r3, [r2, #0]
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000500 	.word	0x20000500
 8003d44:	200004ec 	.word	0x200004ec
 8003d48:	200004e0 	.word	0x200004e0
 8003d4c:	200003dc 	.word	0x200003dc
 8003d50:	200003d8 	.word	0x200003d8

08003d54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <vTaskPlaceOnEventList+0x24>
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e7fe      	b.n	8003d76 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d78:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <vTaskPlaceOnEventList+0x44>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3318      	adds	r3, #24
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fe fef2 	bl	8002b6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d86:	2101      	movs	r1, #1
 8003d88:	6838      	ldr	r0, [r7, #0]
 8003d8a:	f000 fa63 	bl	8004254 <prvAddCurrentTaskToDelayedList>
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200003d8 	.word	0x200003d8

08003d9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <xTaskRemoveFromEventList+0x2a>
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e7fe      	b.n	8003dc4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	3318      	adds	r3, #24
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe ff05 	bl	8002bda <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <xTaskRemoveFromEventList+0xac>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d11c      	bne.n	8003e12 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe fefc 	bl	8002bda <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	2201      	movs	r2, #1
 8003de8:	409a      	lsls	r2, r3
 8003dea:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <xTaskRemoveFromEventList+0xb0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <xTaskRemoveFromEventList+0xb0>)
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <xTaskRemoveFromEventList+0xb4>)
 8003e02:	441a      	add	r2, r3
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f7fe fe8a 	bl	8002b24 <vListInsertEnd>
 8003e10:	e005      	b.n	8003e1e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	3318      	adds	r3, #24
 8003e16:	4619      	mov	r1, r3
 8003e18:	480e      	ldr	r0, [pc, #56]	; (8003e54 <xTaskRemoveFromEventList+0xb8>)
 8003e1a:	f7fe fe83 	bl	8002b24 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <xTaskRemoveFromEventList+0xbc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d905      	bls.n	8003e38 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <xTaskRemoveFromEventList+0xc0>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e001      	b.n	8003e3c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e3c:	697b      	ldr	r3, [r7, #20]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000500 	.word	0x20000500
 8003e4c:	200004e0 	.word	0x200004e0
 8003e50:	200003dc 	.word	0x200003dc
 8003e54:	20000498 	.word	0x20000498
 8003e58:	200003d8 	.word	0x200003d8
 8003e5c:	200004ec 	.word	0x200004ec

08003e60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <vTaskInternalSetTimeOutState+0x24>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <vTaskInternalSetTimeOutState+0x28>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	605a      	str	r2, [r3, #4]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	200004f0 	.word	0x200004f0
 8003e88:	200004dc 	.word	0x200004dc

08003e8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d109      	bne.n	8003eb0 <xTaskCheckForTimeOut+0x24>
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	e7fe      	b.n	8003eae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <xTaskCheckForTimeOut+0x3e>
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e7fe      	b.n	8003ec8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003eca:	f000 fb15 	bl	80044f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ece:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <xTaskCheckForTimeOut+0xb8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d102      	bne.n	8003eee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e023      	b.n	8003f36 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <xTaskCheckForTimeOut+0xbc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d007      	beq.n	8003f0a <xTaskCheckForTimeOut+0x7e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	e015      	b.n	8003f36 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d20b      	bcs.n	8003f2c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	1ad2      	subs	r2, r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff9d 	bl	8003e60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	e004      	b.n	8003f36 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f32:	2301      	movs	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f36:	f000 fb0d 	bl	8004554 <vPortExitCritical>

	return xReturn;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	200004dc 	.word	0x200004dc
 8003f48:	200004f0 	.word	0x200004f0

08003f4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <vTaskMissedYield+0x14>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	200004ec 	.word	0x200004ec

08003f64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f6c:	f000 f852 	bl	8004014 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <prvIdleTask+0x28>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d9f9      	bls.n	8003f6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <prvIdleTask+0x2c>)
 8003f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f88:	e7f0      	b.n	8003f6c <prvIdleTask+0x8>
 8003f8a:	bf00      	nop
 8003f8c:	200003dc 	.word	0x200003dc
 8003f90:	e000ed04 	.word	0xe000ed04

08003f94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	e00c      	b.n	8003fba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <prvInitialiseTaskLists+0x60>)
 8003fac:	4413      	add	r3, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fd8d 	bl	8002ace <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b06      	cmp	r3, #6
 8003fbe:	d9ef      	bls.n	8003fa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fc0:	480d      	ldr	r0, [pc, #52]	; (8003ff8 <prvInitialiseTaskLists+0x64>)
 8003fc2:	f7fe fd84 	bl	8002ace <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fc6:	480d      	ldr	r0, [pc, #52]	; (8003ffc <prvInitialiseTaskLists+0x68>)
 8003fc8:	f7fe fd81 	bl	8002ace <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fcc:	480c      	ldr	r0, [pc, #48]	; (8004000 <prvInitialiseTaskLists+0x6c>)
 8003fce:	f7fe fd7e 	bl	8002ace <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fd2:	480c      	ldr	r0, [pc, #48]	; (8004004 <prvInitialiseTaskLists+0x70>)
 8003fd4:	f7fe fd7b 	bl	8002ace <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fd8:	480b      	ldr	r0, [pc, #44]	; (8004008 <prvInitialiseTaskLists+0x74>)
 8003fda:	f7fe fd78 	bl	8002ace <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <prvInitialiseTaskLists+0x78>)
 8003fe0:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <prvInitialiseTaskLists+0x64>)
 8003fe2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <prvInitialiseTaskLists+0x7c>)
 8003fe6:	4a05      	ldr	r2, [pc, #20]	; (8003ffc <prvInitialiseTaskLists+0x68>)
 8003fe8:	601a      	str	r2, [r3, #0]
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	200003dc 	.word	0x200003dc
 8003ff8:	20000468 	.word	0x20000468
 8003ffc:	2000047c 	.word	0x2000047c
 8004000:	20000498 	.word	0x20000498
 8004004:	200004ac 	.word	0x200004ac
 8004008:	200004c4 	.word	0x200004c4
 800400c:	20000490 	.word	0x20000490
 8004010:	20000494 	.word	0x20000494

08004014 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800401a:	e019      	b.n	8004050 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800401c:	f000 fa6c 	bl	80044f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <prvCheckTasksWaitingTermination+0x4c>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fdd4 	bl	8002bda <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <prvCheckTasksWaitingTermination+0x50>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3b01      	subs	r3, #1
 8004038:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <prvCheckTasksWaitingTermination+0x50>)
 800403a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <prvCheckTasksWaitingTermination+0x54>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3b01      	subs	r3, #1
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <prvCheckTasksWaitingTermination+0x54>)
 8004044:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004046:	f000 fa85 	bl	8004554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f80e 	bl	800406c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <prvCheckTasksWaitingTermination+0x54>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e1      	bne.n	800401c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	200004ac 	.word	0x200004ac
 8004064:	200004d8 	.word	0x200004d8
 8004068:	200004c0 	.word	0x200004c0

0800406c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800407a:	2b00      	cmp	r3, #0
 800407c:	d108      	bne.n	8004090 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fbf0 	bl	8004868 <vPortFree>
				vPortFree( pxTCB );
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fbed 	bl	8004868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800408e:	e017      	b.n	80040c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004096:	2b01      	cmp	r3, #1
 8004098:	d103      	bne.n	80040a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fbe4 	bl	8004868 <vPortFree>
	}
 80040a0:	e00e      	b.n	80040c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d009      	beq.n	80040c0 <prvDeleteTCB+0x54>
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e7fe      	b.n	80040be <prvDeleteTCB+0x52>
	}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ce:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <prvResetNextTaskUnblockTime+0x40>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <prvResetNextTaskUnblockTime+0x14>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <prvResetNextTaskUnblockTime+0x16>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <prvResetNextTaskUnblockTime+0x44>)
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040ea:	e008      	b.n	80040fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <prvResetNextTaskUnblockTime+0x40>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <prvResetNextTaskUnblockTime+0x44>)
 80040fc:	6013      	str	r3, [r2, #0]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	20000490 	.word	0x20000490
 800410c:	200004f8 	.word	0x200004f8

08004110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <xTaskGetSchedulerState+0x34>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800411e:	2301      	movs	r3, #1
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	e008      	b.n	8004136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004124:	4b08      	ldr	r3, [pc, #32]	; (8004148 <xTaskGetSchedulerState+0x38>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800412c:	2302      	movs	r3, #2
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	e001      	b.n	8004136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004136:	687b      	ldr	r3, [r7, #4]
	}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	200004e4 	.word	0x200004e4
 8004148:	20000500 	.word	0x20000500

0800414c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d06c      	beq.n	800423c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004162:	4b39      	ldr	r3, [pc, #228]	; (8004248 <xTaskPriorityDisinherit+0xfc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	429a      	cmp	r2, r3
 800416a:	d009      	beq.n	8004180 <xTaskPriorityDisinherit+0x34>
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e7fe      	b.n	800417e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004184:	2b00      	cmp	r3, #0
 8004186:	d109      	bne.n	800419c <xTaskPriorityDisinherit+0x50>
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	e7fe      	b.n	800419a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d044      	beq.n	800423c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d140      	bne.n	800423c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	3304      	adds	r3, #4
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fe fd0b 	bl	8002bda <uxListRemove>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d115      	bne.n	80041f6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ce:	491f      	ldr	r1, [pc, #124]	; (800424c <xTaskPriorityDisinherit+0x100>)
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <xTaskPriorityDisinherit+0xaa>
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	2201      	movs	r2, #1
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43da      	mvns	r2, r3
 80041ec:	4b18      	ldr	r3, [pc, #96]	; (8004250 <xTaskPriorityDisinherit+0x104>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4013      	ands	r3, r2
 80041f2:	4a17      	ldr	r2, [pc, #92]	; (8004250 <xTaskPriorityDisinherit+0x104>)
 80041f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	f1c3 0207 	rsb	r2, r3, #7
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	2201      	movs	r2, #1
 8004210:	409a      	lsls	r2, r3
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <xTaskPriorityDisinherit+0x104>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4313      	orrs	r3, r2
 8004218:	4a0d      	ldr	r2, [pc, #52]	; (8004250 <xTaskPriorityDisinherit+0x104>)
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4a08      	ldr	r2, [pc, #32]	; (800424c <xTaskPriorityDisinherit+0x100>)
 800422a:	441a      	add	r2, r3
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	3304      	adds	r3, #4
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f7fe fc76 	bl	8002b24 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800423c:	697b      	ldr	r3, [r7, #20]
	}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200003d8 	.word	0x200003d8
 800424c:	200003dc 	.word	0x200003dc
 8004250:	200004e0 	.word	0x200004e0

08004254 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800425e:	4b29      	ldr	r3, [pc, #164]	; (8004304 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004264:	4b28      	ldr	r3, [pc, #160]	; (8004308 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3304      	adds	r3, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fcb5 	bl	8002bda <uxListRemove>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004276:	4b24      	ldr	r3, [pc, #144]	; (8004308 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	2201      	movs	r2, #1
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43da      	mvns	r2, r3
 8004284:	4b21      	ldr	r3, [pc, #132]	; (800430c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4013      	ands	r3, r2
 800428a:	4a20      	ldr	r2, [pc, #128]	; (800430c <prvAddCurrentTaskToDelayedList+0xb8>)
 800428c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d10a      	bne.n	80042ac <prvAddCurrentTaskToDelayedList+0x58>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800429c:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <prvAddCurrentTaskToDelayedList+0xb4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	481a      	ldr	r0, [pc, #104]	; (8004310 <prvAddCurrentTaskToDelayedList+0xbc>)
 80042a6:	f7fe fc3d 	bl	8002b24 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042aa:	e026      	b.n	80042fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042b4:	4b14      	ldr	r3, [pc, #80]	; (8004308 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d209      	bcs.n	80042d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042c4:	4b13      	ldr	r3, [pc, #76]	; (8004314 <prvAddCurrentTaskToDelayedList+0xc0>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4619      	mov	r1, r3
 80042d0:	4610      	mov	r0, r2
 80042d2:	f7fe fc4a 	bl	8002b6a <vListInsert>
}
 80042d6:	e010      	b.n	80042fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042d8:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <prvAddCurrentTaskToDelayedList+0xc4>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f7fe fc40 	bl	8002b6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <prvAddCurrentTaskToDelayedList+0xc8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d202      	bcs.n	80042fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80042f4:	4a09      	ldr	r2, [pc, #36]	; (800431c <prvAddCurrentTaskToDelayedList+0xc8>)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6013      	str	r3, [r2, #0]
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200004dc 	.word	0x200004dc
 8004308:	200003d8 	.word	0x200003d8
 800430c:	200004e0 	.word	0x200004e0
 8004310:	200004c4 	.word	0x200004c4
 8004314:	20000494 	.word	0x20000494
 8004318:	20000490 	.word	0x20000490
 800431c:	200004f8 	.word	0x200004f8

08004320 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3b04      	subs	r3, #4
 8004330:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3b04      	subs	r3, #4
 800433e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3b04      	subs	r3, #4
 800434e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004350:	4a08      	ldr	r2, [pc, #32]	; (8004374 <pxPortInitialiseStack+0x54>)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3b14      	subs	r3, #20
 800435a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3b20      	subs	r3, #32
 8004366:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	08004379 	.word	0x08004379

08004378 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800437e:	2300      	movs	r3, #0
 8004380:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <prvTaskExitError+0x4c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d009      	beq.n	80043a0 <prvTaskExitError+0x28>
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	e7fe      	b.n	800439e <prvTaskExitError+0x26>
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043b2:	bf00      	nop
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0fc      	beq.n	80043b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	2000000c 	.word	0x2000000c
	...

080043d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043d0:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <pxCurrentTCBConst2>)
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	6808      	ldr	r0, [r1, #0]
 80043d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043da:	f380 8809 	msr	PSP, r0
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f04f 0000 	mov.w	r0, #0
 80043e6:	f380 8811 	msr	BASEPRI, r0
 80043ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80043ee:	4770      	bx	lr

080043f0 <pxCurrentTCBConst2>:
 80043f0:	200003d8 	.word	0x200003d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop

080043f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80043f8:	4806      	ldr	r0, [pc, #24]	; (8004414 <prvPortStartFirstTask+0x1c>)
 80043fa:	6800      	ldr	r0, [r0, #0]
 80043fc:	6800      	ldr	r0, [r0, #0]
 80043fe:	f380 8808 	msr	MSP, r0
 8004402:	b662      	cpsie	i
 8004404:	b661      	cpsie	f
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	df00      	svc	0
 8004410:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004412:	bf00      	nop
 8004414:	e000ed08 	.word	0xe000ed08

08004418 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800441e:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <xPortStartScheduler+0xcc>)
 8004420:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	22ff      	movs	r2, #255	; 0xff
 800442e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <xPortStartScheduler+0xd0>)
 8004444:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <xPortStartScheduler+0xd4>)
 8004448:	2207      	movs	r2, #7
 800444a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800444c:	e009      	b.n	8004462 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800444e:	4b27      	ldr	r3, [pc, #156]	; (80044ec <xPortStartScheduler+0xd4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3b01      	subs	r3, #1
 8004454:	4a25      	ldr	r2, [pc, #148]	; (80044ec <xPortStartScheduler+0xd4>)
 8004456:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	b2db      	uxtb	r3, r3
 8004460:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446a:	2b80      	cmp	r3, #128	; 0x80
 800446c:	d0ef      	beq.n	800444e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800446e:	4b1f      	ldr	r3, [pc, #124]	; (80044ec <xPortStartScheduler+0xd4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f1c3 0307 	rsb	r3, r3, #7
 8004476:	2b04      	cmp	r3, #4
 8004478:	d009      	beq.n	800448e <xPortStartScheduler+0x76>
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	e7fe      	b.n	800448c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <xPortStartScheduler+0xd4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	4a15      	ldr	r2, [pc, #84]	; (80044ec <xPortStartScheduler+0xd4>)
 8004496:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004498:	4b14      	ldr	r3, [pc, #80]	; (80044ec <xPortStartScheduler+0xd4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044a0:	4a12      	ldr	r2, [pc, #72]	; (80044ec <xPortStartScheduler+0xd4>)
 80044a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044ac:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <xPortStartScheduler+0xd8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0f      	ldr	r2, [pc, #60]	; (80044f0 <xPortStartScheduler+0xd8>)
 80044b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <xPortStartScheduler+0xd8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <xPortStartScheduler+0xd8>)
 80044be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044c4:	f000 f8b0 	bl	8004628 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <xPortStartScheduler+0xdc>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044ce:	f7ff ff93 	bl	80043f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044d2:	f7ff fbe5 	bl	8003ca0 <vTaskSwitchContext>
	prvTaskExitError();
 80044d6:	f7ff ff4f 	bl	8004378 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	e000e400 	.word	0xe000e400
 80044e8:	20000504 	.word	0x20000504
 80044ec:	20000508 	.word	0x20000508
 80044f0:	e000ed20 	.word	0xe000ed20
 80044f4:	2000000c 	.word	0x2000000c

080044f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004510:	4b0e      	ldr	r3, [pc, #56]	; (800454c <vPortEnterCritical+0x54>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3301      	adds	r3, #1
 8004516:	4a0d      	ldr	r2, [pc, #52]	; (800454c <vPortEnterCritical+0x54>)
 8004518:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <vPortEnterCritical+0x54>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d10e      	bne.n	8004540 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <vPortEnterCritical+0x58>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <vPortEnterCritical+0x48>
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	e7fe      	b.n	800453e <vPortEnterCritical+0x46>
	}
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000000c 	.word	0x2000000c
 8004550:	e000ed04 	.word	0xe000ed04

08004554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800455a:	4b10      	ldr	r3, [pc, #64]	; (800459c <vPortExitCritical+0x48>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <vPortExitCritical+0x22>
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	e7fe      	b.n	8004574 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004576:	4b09      	ldr	r3, [pc, #36]	; (800459c <vPortExitCritical+0x48>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3b01      	subs	r3, #1
 800457c:	4a07      	ldr	r2, [pc, #28]	; (800459c <vPortExitCritical+0x48>)
 800457e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <vPortExitCritical+0x48>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <vPortExitCritical+0x3e>
 8004588:	2300      	movs	r3, #0
 800458a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	2000000c 	.word	0x2000000c

080045a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045a0:	f3ef 8009 	mrs	r0, PSP
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <pxCurrentTCBConst>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045b0:	6010      	str	r0, [r2, #0]
 80045b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80045b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045ba:	f380 8811 	msr	BASEPRI, r0
 80045be:	f7ff fb6f 	bl	8003ca0 <vTaskSwitchContext>
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f380 8811 	msr	BASEPRI, r0
 80045ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80045ce:	6819      	ldr	r1, [r3, #0]
 80045d0:	6808      	ldr	r0, [r1, #0]
 80045d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045d6:	f380 8809 	msr	PSP, r0
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	4770      	bx	lr

080045e0 <pxCurrentTCBConst>:
 80045e0:	200003d8 	.word	0x200003d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004600:	f7ff fa92 	bl	8003b28 <xTaskIncrementTick>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800460a:	4b06      	ldr	r3, [pc, #24]	; (8004624 <SysTick_Handler+0x3c>)
 800460c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <vPortSetupTimerInterrupt+0x30>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <vPortSetupTimerInterrupt+0x34>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <vPortSetupTimerInterrupt+0x38>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <vPortSetupTimerInterrupt+0x3c>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	099b      	lsrs	r3, r3, #6
 8004644:	4a08      	ldr	r2, [pc, #32]	; (8004668 <vPortSetupTimerInterrupt+0x40>)
 8004646:	3b01      	subs	r3, #1
 8004648:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800464a:	4b03      	ldr	r3, [pc, #12]	; (8004658 <vPortSetupTimerInterrupt+0x30>)
 800464c:	2207      	movs	r2, #7
 800464e:	601a      	str	r2, [r3, #0]
}
 8004650:	bf00      	nop
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	e000e010 	.word	0xe000e010
 800465c:	e000e018 	.word	0xe000e018
 8004660:	20000000 	.word	0x20000000
 8004664:	10624dd3 	.word	0x10624dd3
 8004668:	e000e014 	.word	0xe000e014

0800466c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004672:	f3ef 8305 	mrs	r3, IPSR
 8004676:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b0f      	cmp	r3, #15
 800467c:	d913      	bls.n	80046a6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800467e:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <vPortValidateInterruptPriority+0x68>)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004688:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <vPortValidateInterruptPriority+0x6c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	7afa      	ldrb	r2, [r7, #11]
 800468e:	429a      	cmp	r2, r3
 8004690:	d209      	bcs.n	80046a6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	e7fe      	b.n	80046a4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <vPortValidateInterruptPriority+0x70>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <vPortValidateInterruptPriority+0x74>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d909      	bls.n	80046ca <vPortValidateInterruptPriority+0x5e>
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	e7fe      	b.n	80046c8 <vPortValidateInterruptPriority+0x5c>
	}
 80046ca:	bf00      	nop
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr
 80046d4:	e000e3f0 	.word	0xe000e3f0
 80046d8:	20000504 	.word	0x20000504
 80046dc:	e000ed0c 	.word	0xe000ed0c
 80046e0:	20000508 	.word	0x20000508

080046e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	; 0x28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046f0:	f7ff f970 	bl	80039d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046f4:	4b57      	ldr	r3, [pc, #348]	; (8004854 <pvPortMalloc+0x170>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046fc:	f000 f90c 	bl	8004918 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004700:	4b55      	ldr	r3, [pc, #340]	; (8004858 <pvPortMalloc+0x174>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 808c 	bne.w	8004826 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01c      	beq.n	800474e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004714:	2208      	movs	r2, #8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4413      	add	r3, r2
 800471a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	2b00      	cmp	r3, #0
 8004724:	d013      	beq.n	800474e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f023 0307 	bic.w	r3, r3, #7
 800472c:	3308      	adds	r3, #8
 800472e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <pvPortMalloc+0x6a>
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e7fe      	b.n	800474c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d068      	beq.n	8004826 <pvPortMalloc+0x142>
 8004754:	4b41      	ldr	r3, [pc, #260]	; (800485c <pvPortMalloc+0x178>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d863      	bhi.n	8004826 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800475e:	4b40      	ldr	r3, [pc, #256]	; (8004860 <pvPortMalloc+0x17c>)
 8004760:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004762:	4b3f      	ldr	r3, [pc, #252]	; (8004860 <pvPortMalloc+0x17c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004768:	e004      	b.n	8004774 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	429a      	cmp	r2, r3
 800477c:	d903      	bls.n	8004786 <pvPortMalloc+0xa2>
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f1      	bne.n	800476a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004786:	4b33      	ldr	r3, [pc, #204]	; (8004854 <pvPortMalloc+0x170>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478c:	429a      	cmp	r2, r3
 800478e:	d04a      	beq.n	8004826 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2208      	movs	r2, #8
 8004796:	4413      	add	r3, r2
 8004798:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	1ad2      	subs	r2, r2, r3
 80047aa:	2308      	movs	r3, #8
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d91e      	bls.n	80047f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4413      	add	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <pvPortMalloc+0xf4>
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	e7fe      	b.n	80047d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	1ad2      	subs	r2, r2, r3
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047ea:	69b8      	ldr	r0, [r7, #24]
 80047ec:	f000 f8f6 	bl	80049dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047f0:	4b1a      	ldr	r3, [pc, #104]	; (800485c <pvPortMalloc+0x178>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	4a18      	ldr	r2, [pc, #96]	; (800485c <pvPortMalloc+0x178>)
 80047fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047fe:	4b17      	ldr	r3, [pc, #92]	; (800485c <pvPortMalloc+0x178>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b18      	ldr	r3, [pc, #96]	; (8004864 <pvPortMalloc+0x180>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d203      	bcs.n	8004812 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800480a:	4b14      	ldr	r3, [pc, #80]	; (800485c <pvPortMalloc+0x178>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a15      	ldr	r2, [pc, #84]	; (8004864 <pvPortMalloc+0x180>)
 8004810:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <pvPortMalloc+0x174>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	431a      	orrs	r2, r3
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004826:	f7ff f8e3 	bl	80039f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <pvPortMalloc+0x164>
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	e7fe      	b.n	8004846 <pvPortMalloc+0x162>
	return pvReturn;
 8004848:	69fb      	ldr	r3, [r7, #28]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3728      	adds	r7, #40	; 0x28
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20001114 	.word	0x20001114
 8004858:	20001120 	.word	0x20001120
 800485c:	20001118 	.word	0x20001118
 8004860:	2000110c 	.word	0x2000110c
 8004864:	2000111c 	.word	0x2000111c

08004868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d046      	beq.n	8004908 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800487a:	2308      	movs	r3, #8
 800487c:	425b      	negs	r3, r3
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4413      	add	r3, r2
 8004882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	4b20      	ldr	r3, [pc, #128]	; (8004910 <vPortFree+0xa8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4013      	ands	r3, r2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <vPortFree+0x42>
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e7fe      	b.n	80048a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <vPortFree+0x5e>
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	e7fe      	b.n	80048c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	4b11      	ldr	r3, [pc, #68]	; (8004910 <vPortFree+0xa8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d019      	beq.n	8004908 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d115      	bne.n	8004908 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <vPortFree+0xa8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	401a      	ands	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048ec:	f7ff f872 	bl	80039d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <vPortFree+0xac>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4413      	add	r3, r2
 80048fa:	4a06      	ldr	r2, [pc, #24]	; (8004914 <vPortFree+0xac>)
 80048fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048fe:	6938      	ldr	r0, [r7, #16]
 8004900:	f000 f86c 	bl	80049dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004904:	f7ff f874 	bl	80039f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004908:	bf00      	nop
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20001120 	.word	0x20001120
 8004914:	20001118 	.word	0x20001118

08004918 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800491e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004922:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <prvHeapInit+0xac>)
 8004926:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00c      	beq.n	800494c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3307      	adds	r3, #7
 8004936:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0307 	bic.w	r3, r3, #7
 800493e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	4a1f      	ldr	r2, [pc, #124]	; (80049c4 <prvHeapInit+0xac>)
 8004948:	4413      	add	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004950:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <prvHeapInit+0xb0>)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004956:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <prvHeapInit+0xb0>)
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	4413      	add	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004964:	2208      	movs	r2, #8
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4a15      	ldr	r2, [pc, #84]	; (80049cc <prvHeapInit+0xb4>)
 8004978:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800497a:	4b14      	ldr	r3, [pc, #80]	; (80049cc <prvHeapInit+0xb4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <prvHeapInit+0xb4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	1ad2      	subs	r2, r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <prvHeapInit+0xb4>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <prvHeapInit+0xb8>)
 80049a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <prvHeapInit+0xbc>)
 80049ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <prvHeapInit+0xc0>)
 80049b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049b6:	601a      	str	r2, [r3, #0]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	2000050c 	.word	0x2000050c
 80049c8:	2000110c 	.word	0x2000110c
 80049cc:	20001114 	.word	0x20001114
 80049d0:	2000111c 	.word	0x2000111c
 80049d4:	20001118 	.word	0x20001118
 80049d8:	20001120 	.word	0x20001120

080049dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049e4:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <prvInsertBlockIntoFreeList+0xa8>)
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e002      	b.n	80049f0 <prvInsertBlockIntoFreeList+0x14>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d8f7      	bhi.n	80049ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	4413      	add	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d108      	bne.n	8004a1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	441a      	add	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	441a      	add	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d118      	bne.n	8004a64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <prvInsertBlockIntoFreeList+0xac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d00d      	beq.n	8004a5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	441a      	add	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e008      	b.n	8004a6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <prvInsertBlockIntoFreeList+0xac>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e003      	b.n	8004a6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d002      	beq.n	8004a7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	2000110c 	.word	0x2000110c
 8004a88:	20001114 	.word	0x20001114

08004a8c <__errno>:
 8004a8c:	4b01      	ldr	r3, [pc, #4]	; (8004a94 <__errno+0x8>)
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000010 	.word	0x20000010

08004a98 <__libc_init_array>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	2500      	movs	r5, #0
 8004a9c:	4e0c      	ldr	r6, [pc, #48]	; (8004ad0 <__libc_init_array+0x38>)
 8004a9e:	4c0d      	ldr	r4, [pc, #52]	; (8004ad4 <__libc_init_array+0x3c>)
 8004aa0:	1ba4      	subs	r4, r4, r6
 8004aa2:	10a4      	asrs	r4, r4, #2
 8004aa4:	42a5      	cmp	r5, r4
 8004aa6:	d109      	bne.n	8004abc <__libc_init_array+0x24>
 8004aa8:	f000 fc36 	bl	8005318 <_init>
 8004aac:	2500      	movs	r5, #0
 8004aae:	4e0a      	ldr	r6, [pc, #40]	; (8004ad8 <__libc_init_array+0x40>)
 8004ab0:	4c0a      	ldr	r4, [pc, #40]	; (8004adc <__libc_init_array+0x44>)
 8004ab2:	1ba4      	subs	r4, r4, r6
 8004ab4:	10a4      	asrs	r4, r4, #2
 8004ab6:	42a5      	cmp	r5, r4
 8004ab8:	d105      	bne.n	8004ac6 <__libc_init_array+0x2e>
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ac0:	4798      	blx	r3
 8004ac2:	3501      	adds	r5, #1
 8004ac4:	e7ee      	b.n	8004aa4 <__libc_init_array+0xc>
 8004ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004aca:	4798      	blx	r3
 8004acc:	3501      	adds	r5, #1
 8004ace:	e7f2      	b.n	8004ab6 <__libc_init_array+0x1e>
 8004ad0:	08005458 	.word	0x08005458
 8004ad4:	08005458 	.word	0x08005458
 8004ad8:	08005458 	.word	0x08005458
 8004adc:	0800545c 	.word	0x0800545c

08004ae0 <memcpy>:
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	1e43      	subs	r3, r0, #1
 8004ae4:	440a      	add	r2, r1
 8004ae6:	4291      	cmp	r1, r2
 8004ae8:	d100      	bne.n	8004aec <memcpy+0xc>
 8004aea:	bd10      	pop	{r4, pc}
 8004aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af4:	e7f7      	b.n	8004ae6 <memcpy+0x6>

08004af6 <memset>:
 8004af6:	4603      	mov	r3, r0
 8004af8:	4402      	add	r2, r0
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d100      	bne.n	8004b00 <memset+0xa>
 8004afe:	4770      	bx	lr
 8004b00:	f803 1b01 	strb.w	r1, [r3], #1
 8004b04:	e7f9      	b.n	8004afa <memset+0x4>
	...

08004b08 <_free_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	d043      	beq.n	8004b98 <_free_r+0x90>
 8004b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b14:	1f0c      	subs	r4, r1, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bfb8      	it	lt
 8004b1a:	18e4      	addlt	r4, r4, r3
 8004b1c:	f000 f8ca 	bl	8004cb4 <__malloc_lock>
 8004b20:	4a1e      	ldr	r2, [pc, #120]	; (8004b9c <_free_r+0x94>)
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	4610      	mov	r0, r2
 8004b26:	b933      	cbnz	r3, 8004b36 <_free_r+0x2e>
 8004b28:	6063      	str	r3, [r4, #4]
 8004b2a:	6014      	str	r4, [r2, #0]
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b32:	f000 b8c0 	b.w	8004cb6 <__malloc_unlock>
 8004b36:	42a3      	cmp	r3, r4
 8004b38:	d90b      	bls.n	8004b52 <_free_r+0x4a>
 8004b3a:	6821      	ldr	r1, [r4, #0]
 8004b3c:	1862      	adds	r2, r4, r1
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	bf01      	itttt	eq
 8004b42:	681a      	ldreq	r2, [r3, #0]
 8004b44:	685b      	ldreq	r3, [r3, #4]
 8004b46:	1852      	addeq	r2, r2, r1
 8004b48:	6022      	streq	r2, [r4, #0]
 8004b4a:	6063      	str	r3, [r4, #4]
 8004b4c:	6004      	str	r4, [r0, #0]
 8004b4e:	e7ed      	b.n	8004b2c <_free_r+0x24>
 8004b50:	4613      	mov	r3, r2
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	b10a      	cbz	r2, 8004b5a <_free_r+0x52>
 8004b56:	42a2      	cmp	r2, r4
 8004b58:	d9fa      	bls.n	8004b50 <_free_r+0x48>
 8004b5a:	6819      	ldr	r1, [r3, #0]
 8004b5c:	1858      	adds	r0, r3, r1
 8004b5e:	42a0      	cmp	r0, r4
 8004b60:	d10b      	bne.n	8004b7a <_free_r+0x72>
 8004b62:	6820      	ldr	r0, [r4, #0]
 8004b64:	4401      	add	r1, r0
 8004b66:	1858      	adds	r0, r3, r1
 8004b68:	4282      	cmp	r2, r0
 8004b6a:	6019      	str	r1, [r3, #0]
 8004b6c:	d1de      	bne.n	8004b2c <_free_r+0x24>
 8004b6e:	6810      	ldr	r0, [r2, #0]
 8004b70:	6852      	ldr	r2, [r2, #4]
 8004b72:	4401      	add	r1, r0
 8004b74:	6019      	str	r1, [r3, #0]
 8004b76:	605a      	str	r2, [r3, #4]
 8004b78:	e7d8      	b.n	8004b2c <_free_r+0x24>
 8004b7a:	d902      	bls.n	8004b82 <_free_r+0x7a>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	e7d4      	b.n	8004b2c <_free_r+0x24>
 8004b82:	6820      	ldr	r0, [r4, #0]
 8004b84:	1821      	adds	r1, r4, r0
 8004b86:	428a      	cmp	r2, r1
 8004b88:	bf01      	itttt	eq
 8004b8a:	6811      	ldreq	r1, [r2, #0]
 8004b8c:	6852      	ldreq	r2, [r2, #4]
 8004b8e:	1809      	addeq	r1, r1, r0
 8004b90:	6021      	streq	r1, [r4, #0]
 8004b92:	6062      	str	r2, [r4, #4]
 8004b94:	605c      	str	r4, [r3, #4]
 8004b96:	e7c9      	b.n	8004b2c <_free_r+0x24>
 8004b98:	bd38      	pop	{r3, r4, r5, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20001124 	.word	0x20001124

08004ba0 <_malloc_r>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	1ccd      	adds	r5, r1, #3
 8004ba4:	f025 0503 	bic.w	r5, r5, #3
 8004ba8:	3508      	adds	r5, #8
 8004baa:	2d0c      	cmp	r5, #12
 8004bac:	bf38      	it	cc
 8004bae:	250c      	movcc	r5, #12
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	db01      	blt.n	8004bba <_malloc_r+0x1a>
 8004bb6:	42a9      	cmp	r1, r5
 8004bb8:	d903      	bls.n	8004bc2 <_malloc_r+0x22>
 8004bba:	230c      	movs	r3, #12
 8004bbc:	6033      	str	r3, [r6, #0]
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	bd70      	pop	{r4, r5, r6, pc}
 8004bc2:	f000 f877 	bl	8004cb4 <__malloc_lock>
 8004bc6:	4a21      	ldr	r2, [pc, #132]	; (8004c4c <_malloc_r+0xac>)
 8004bc8:	6814      	ldr	r4, [r2, #0]
 8004bca:	4621      	mov	r1, r4
 8004bcc:	b991      	cbnz	r1, 8004bf4 <_malloc_r+0x54>
 8004bce:	4c20      	ldr	r4, [pc, #128]	; (8004c50 <_malloc_r+0xb0>)
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	b91b      	cbnz	r3, 8004bdc <_malloc_r+0x3c>
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f000 f83d 	bl	8004c54 <_sbrk_r>
 8004bda:	6020      	str	r0, [r4, #0]
 8004bdc:	4629      	mov	r1, r5
 8004bde:	4630      	mov	r0, r6
 8004be0:	f000 f838 	bl	8004c54 <_sbrk_r>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d124      	bne.n	8004c32 <_malloc_r+0x92>
 8004be8:	230c      	movs	r3, #12
 8004bea:	4630      	mov	r0, r6
 8004bec:	6033      	str	r3, [r6, #0]
 8004bee:	f000 f862 	bl	8004cb6 <__malloc_unlock>
 8004bf2:	e7e4      	b.n	8004bbe <_malloc_r+0x1e>
 8004bf4:	680b      	ldr	r3, [r1, #0]
 8004bf6:	1b5b      	subs	r3, r3, r5
 8004bf8:	d418      	bmi.n	8004c2c <_malloc_r+0x8c>
 8004bfa:	2b0b      	cmp	r3, #11
 8004bfc:	d90f      	bls.n	8004c1e <_malloc_r+0x7e>
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	18cc      	adds	r4, r1, r3
 8004c02:	50cd      	str	r5, [r1, r3]
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 f856 	bl	8004cb6 <__malloc_unlock>
 8004c0a:	f104 000b 	add.w	r0, r4, #11
 8004c0e:	1d23      	adds	r3, r4, #4
 8004c10:	f020 0007 	bic.w	r0, r0, #7
 8004c14:	1ac3      	subs	r3, r0, r3
 8004c16:	d0d3      	beq.n	8004bc0 <_malloc_r+0x20>
 8004c18:	425a      	negs	r2, r3
 8004c1a:	50e2      	str	r2, [r4, r3]
 8004c1c:	e7d0      	b.n	8004bc0 <_malloc_r+0x20>
 8004c1e:	684b      	ldr	r3, [r1, #4]
 8004c20:	428c      	cmp	r4, r1
 8004c22:	bf16      	itet	ne
 8004c24:	6063      	strne	r3, [r4, #4]
 8004c26:	6013      	streq	r3, [r2, #0]
 8004c28:	460c      	movne	r4, r1
 8004c2a:	e7eb      	b.n	8004c04 <_malloc_r+0x64>
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	6849      	ldr	r1, [r1, #4]
 8004c30:	e7cc      	b.n	8004bcc <_malloc_r+0x2c>
 8004c32:	1cc4      	adds	r4, r0, #3
 8004c34:	f024 0403 	bic.w	r4, r4, #3
 8004c38:	42a0      	cmp	r0, r4
 8004c3a:	d005      	beq.n	8004c48 <_malloc_r+0xa8>
 8004c3c:	1a21      	subs	r1, r4, r0
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f000 f808 	bl	8004c54 <_sbrk_r>
 8004c44:	3001      	adds	r0, #1
 8004c46:	d0cf      	beq.n	8004be8 <_malloc_r+0x48>
 8004c48:	6025      	str	r5, [r4, #0]
 8004c4a:	e7db      	b.n	8004c04 <_malloc_r+0x64>
 8004c4c:	20001124 	.word	0x20001124
 8004c50:	20001128 	.word	0x20001128

08004c54 <_sbrk_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	2300      	movs	r3, #0
 8004c58:	4c05      	ldr	r4, [pc, #20]	; (8004c70 <_sbrk_r+0x1c>)
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	6023      	str	r3, [r4, #0]
 8004c60:	f7fb fdee 	bl	8000840 <_sbrk>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_sbrk_r+0x1a>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_sbrk_r+0x1a>
 8004c6c:	602b      	str	r3, [r5, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	2000124c 	.word	0x2000124c

08004c74 <siprintf>:
 8004c74:	b40e      	push	{r1, r2, r3}
 8004c76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c7a:	b500      	push	{lr}
 8004c7c:	b09c      	sub	sp, #112	; 0x70
 8004c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c80:	9002      	str	r0, [sp, #8]
 8004c82:	9006      	str	r0, [sp, #24]
 8004c84:	9107      	str	r1, [sp, #28]
 8004c86:	9104      	str	r1, [sp, #16]
 8004c88:	4808      	ldr	r0, [pc, #32]	; (8004cac <siprintf+0x38>)
 8004c8a:	4909      	ldr	r1, [pc, #36]	; (8004cb0 <siprintf+0x3c>)
 8004c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c90:	9105      	str	r1, [sp, #20]
 8004c92:	6800      	ldr	r0, [r0, #0]
 8004c94:	a902      	add	r1, sp, #8
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	f000 f868 	bl	8004d6c <_svfiprintf_r>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	9b02      	ldr	r3, [sp, #8]
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	b01c      	add	sp, #112	; 0x70
 8004ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ca8:	b003      	add	sp, #12
 8004caa:	4770      	bx	lr
 8004cac:	20000010 	.word	0x20000010
 8004cb0:	ffff0208 	.word	0xffff0208

08004cb4 <__malloc_lock>:
 8004cb4:	4770      	bx	lr

08004cb6 <__malloc_unlock>:
 8004cb6:	4770      	bx	lr

08004cb8 <__ssputs_r>:
 8004cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbc:	688e      	ldr	r6, [r1, #8]
 8004cbe:	4682      	mov	sl, r0
 8004cc0:	429e      	cmp	r6, r3
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	4690      	mov	r8, r2
 8004cc6:	4699      	mov	r9, r3
 8004cc8:	d837      	bhi.n	8004d3a <__ssputs_r+0x82>
 8004cca:	898a      	ldrh	r2, [r1, #12]
 8004ccc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cd0:	d031      	beq.n	8004d36 <__ssputs_r+0x7e>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	6825      	ldr	r5, [r4, #0]
 8004cd6:	6909      	ldr	r1, [r1, #16]
 8004cd8:	1a6f      	subs	r7, r5, r1
 8004cda:	6965      	ldr	r5, [r4, #20]
 8004cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ce0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004ce4:	f109 0301 	add.w	r3, r9, #1
 8004ce8:	443b      	add	r3, r7
 8004cea:	429d      	cmp	r5, r3
 8004cec:	bf38      	it	cc
 8004cee:	461d      	movcc	r5, r3
 8004cf0:	0553      	lsls	r3, r2, #21
 8004cf2:	d530      	bpl.n	8004d56 <__ssputs_r+0x9e>
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	f7ff ff53 	bl	8004ba0 <_malloc_r>
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	b950      	cbnz	r0, 8004d14 <__ssputs_r+0x5c>
 8004cfe:	230c      	movs	r3, #12
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	f8ca 3000 	str.w	r3, [sl]
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d0e:	81a3      	strh	r3, [r4, #12]
 8004d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d14:	463a      	mov	r2, r7
 8004d16:	6921      	ldr	r1, [r4, #16]
 8004d18:	f7ff fee2 	bl	8004ae0 <memcpy>
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d26:	81a3      	strh	r3, [r4, #12]
 8004d28:	6126      	str	r6, [r4, #16]
 8004d2a:	443e      	add	r6, r7
 8004d2c:	6026      	str	r6, [r4, #0]
 8004d2e:	464e      	mov	r6, r9
 8004d30:	6165      	str	r5, [r4, #20]
 8004d32:	1bed      	subs	r5, r5, r7
 8004d34:	60a5      	str	r5, [r4, #8]
 8004d36:	454e      	cmp	r6, r9
 8004d38:	d900      	bls.n	8004d3c <__ssputs_r+0x84>
 8004d3a:	464e      	mov	r6, r9
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	4641      	mov	r1, r8
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	f000 faa1 	bl	8005288 <memmove>
 8004d46:	68a3      	ldr	r3, [r4, #8]
 8004d48:	2000      	movs	r0, #0
 8004d4a:	1b9b      	subs	r3, r3, r6
 8004d4c:	60a3      	str	r3, [r4, #8]
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	441e      	add	r6, r3
 8004d52:	6026      	str	r6, [r4, #0]
 8004d54:	e7dc      	b.n	8004d10 <__ssputs_r+0x58>
 8004d56:	462a      	mov	r2, r5
 8004d58:	f000 faaf 	bl	80052ba <_realloc_r>
 8004d5c:	4606      	mov	r6, r0
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d1e2      	bne.n	8004d28 <__ssputs_r+0x70>
 8004d62:	6921      	ldr	r1, [r4, #16]
 8004d64:	4650      	mov	r0, sl
 8004d66:	f7ff fecf 	bl	8004b08 <_free_r>
 8004d6a:	e7c8      	b.n	8004cfe <__ssputs_r+0x46>

08004d6c <_svfiprintf_r>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	461d      	mov	r5, r3
 8004d72:	898b      	ldrh	r3, [r1, #12]
 8004d74:	b09d      	sub	sp, #116	; 0x74
 8004d76:	061f      	lsls	r7, r3, #24
 8004d78:	4680      	mov	r8, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	4616      	mov	r6, r2
 8004d7e:	d50f      	bpl.n	8004da0 <_svfiprintf_r+0x34>
 8004d80:	690b      	ldr	r3, [r1, #16]
 8004d82:	b96b      	cbnz	r3, 8004da0 <_svfiprintf_r+0x34>
 8004d84:	2140      	movs	r1, #64	; 0x40
 8004d86:	f7ff ff0b 	bl	8004ba0 <_malloc_r>
 8004d8a:	6020      	str	r0, [r4, #0]
 8004d8c:	6120      	str	r0, [r4, #16]
 8004d8e:	b928      	cbnz	r0, 8004d9c <_svfiprintf_r+0x30>
 8004d90:	230c      	movs	r3, #12
 8004d92:	f8c8 3000 	str.w	r3, [r8]
 8004d96:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9a:	e0c8      	b.n	8004f2e <_svfiprintf_r+0x1c2>
 8004d9c:	2340      	movs	r3, #64	; 0x40
 8004d9e:	6163      	str	r3, [r4, #20]
 8004da0:	2300      	movs	r3, #0
 8004da2:	9309      	str	r3, [sp, #36]	; 0x24
 8004da4:	2320      	movs	r3, #32
 8004da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004daa:	2330      	movs	r3, #48	; 0x30
 8004dac:	f04f 0b01 	mov.w	fp, #1
 8004db0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004db4:	9503      	str	r5, [sp, #12]
 8004db6:	4637      	mov	r7, r6
 8004db8:	463d      	mov	r5, r7
 8004dba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004dbe:	b10b      	cbz	r3, 8004dc4 <_svfiprintf_r+0x58>
 8004dc0:	2b25      	cmp	r3, #37	; 0x25
 8004dc2:	d13e      	bne.n	8004e42 <_svfiprintf_r+0xd6>
 8004dc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004dc8:	d00b      	beq.n	8004de2 <_svfiprintf_r+0x76>
 8004dca:	4653      	mov	r3, sl
 8004dcc:	4632      	mov	r2, r6
 8004dce:	4621      	mov	r1, r4
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	f7ff ff71 	bl	8004cb8 <__ssputs_r>
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f000 80a4 	beq.w	8004f24 <_svfiprintf_r+0x1b8>
 8004ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dde:	4453      	add	r3, sl
 8004de0:	9309      	str	r3, [sp, #36]	; 0x24
 8004de2:	783b      	ldrb	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 809d 	beq.w	8004f24 <_svfiprintf_r+0x1b8>
 8004dea:	2300      	movs	r3, #0
 8004dec:	f04f 32ff 	mov.w	r2, #4294967295
 8004df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004df4:	9304      	str	r3, [sp, #16]
 8004df6:	9307      	str	r3, [sp, #28]
 8004df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8004dfe:	462f      	mov	r7, r5
 8004e00:	2205      	movs	r2, #5
 8004e02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004e06:	4850      	ldr	r0, [pc, #320]	; (8004f48 <_svfiprintf_r+0x1dc>)
 8004e08:	f000 fa30 	bl	800526c <memchr>
 8004e0c:	9b04      	ldr	r3, [sp, #16]
 8004e0e:	b9d0      	cbnz	r0, 8004e46 <_svfiprintf_r+0xda>
 8004e10:	06d9      	lsls	r1, r3, #27
 8004e12:	bf44      	itt	mi
 8004e14:	2220      	movmi	r2, #32
 8004e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e1a:	071a      	lsls	r2, r3, #28
 8004e1c:	bf44      	itt	mi
 8004e1e:	222b      	movmi	r2, #43	; 0x2b
 8004e20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e24:	782a      	ldrb	r2, [r5, #0]
 8004e26:	2a2a      	cmp	r2, #42	; 0x2a
 8004e28:	d015      	beq.n	8004e56 <_svfiprintf_r+0xea>
 8004e2a:	462f      	mov	r7, r5
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	250a      	movs	r5, #10
 8004e30:	9a07      	ldr	r2, [sp, #28]
 8004e32:	4639      	mov	r1, r7
 8004e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e38:	3b30      	subs	r3, #48	; 0x30
 8004e3a:	2b09      	cmp	r3, #9
 8004e3c:	d94d      	bls.n	8004eda <_svfiprintf_r+0x16e>
 8004e3e:	b1b8      	cbz	r0, 8004e70 <_svfiprintf_r+0x104>
 8004e40:	e00f      	b.n	8004e62 <_svfiprintf_r+0xf6>
 8004e42:	462f      	mov	r7, r5
 8004e44:	e7b8      	b.n	8004db8 <_svfiprintf_r+0x4c>
 8004e46:	4a40      	ldr	r2, [pc, #256]	; (8004f48 <_svfiprintf_r+0x1dc>)
 8004e48:	463d      	mov	r5, r7
 8004e4a:	1a80      	subs	r0, r0, r2
 8004e4c:	fa0b f000 	lsl.w	r0, fp, r0
 8004e50:	4318      	orrs	r0, r3
 8004e52:	9004      	str	r0, [sp, #16]
 8004e54:	e7d3      	b.n	8004dfe <_svfiprintf_r+0x92>
 8004e56:	9a03      	ldr	r2, [sp, #12]
 8004e58:	1d11      	adds	r1, r2, #4
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	9103      	str	r1, [sp, #12]
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	db01      	blt.n	8004e66 <_svfiprintf_r+0xfa>
 8004e62:	9207      	str	r2, [sp, #28]
 8004e64:	e004      	b.n	8004e70 <_svfiprintf_r+0x104>
 8004e66:	4252      	negs	r2, r2
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	9207      	str	r2, [sp, #28]
 8004e6e:	9304      	str	r3, [sp, #16]
 8004e70:	783b      	ldrb	r3, [r7, #0]
 8004e72:	2b2e      	cmp	r3, #46	; 0x2e
 8004e74:	d10c      	bne.n	8004e90 <_svfiprintf_r+0x124>
 8004e76:	787b      	ldrb	r3, [r7, #1]
 8004e78:	2b2a      	cmp	r3, #42	; 0x2a
 8004e7a:	d133      	bne.n	8004ee4 <_svfiprintf_r+0x178>
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	3702      	adds	r7, #2
 8004e80:	1d1a      	adds	r2, r3, #4
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	9203      	str	r2, [sp, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bfb8      	it	lt
 8004e8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e8e:	9305      	str	r3, [sp, #20]
 8004e90:	4d2e      	ldr	r5, [pc, #184]	; (8004f4c <_svfiprintf_r+0x1e0>)
 8004e92:	2203      	movs	r2, #3
 8004e94:	7839      	ldrb	r1, [r7, #0]
 8004e96:	4628      	mov	r0, r5
 8004e98:	f000 f9e8 	bl	800526c <memchr>
 8004e9c:	b138      	cbz	r0, 8004eae <_svfiprintf_r+0x142>
 8004e9e:	2340      	movs	r3, #64	; 0x40
 8004ea0:	1b40      	subs	r0, r0, r5
 8004ea2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ea6:	9b04      	ldr	r3, [sp, #16]
 8004ea8:	3701      	adds	r7, #1
 8004eaa:	4303      	orrs	r3, r0
 8004eac:	9304      	str	r3, [sp, #16]
 8004eae:	7839      	ldrb	r1, [r7, #0]
 8004eb0:	2206      	movs	r2, #6
 8004eb2:	4827      	ldr	r0, [pc, #156]	; (8004f50 <_svfiprintf_r+0x1e4>)
 8004eb4:	1c7e      	adds	r6, r7, #1
 8004eb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eba:	f000 f9d7 	bl	800526c <memchr>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d038      	beq.n	8004f34 <_svfiprintf_r+0x1c8>
 8004ec2:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <_svfiprintf_r+0x1e8>)
 8004ec4:	bb13      	cbnz	r3, 8004f0c <_svfiprintf_r+0x1a0>
 8004ec6:	9b03      	ldr	r3, [sp, #12]
 8004ec8:	3307      	adds	r3, #7
 8004eca:	f023 0307 	bic.w	r3, r3, #7
 8004ece:	3308      	adds	r3, #8
 8004ed0:	9303      	str	r3, [sp, #12]
 8004ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed4:	444b      	add	r3, r9
 8004ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed8:	e76d      	b.n	8004db6 <_svfiprintf_r+0x4a>
 8004eda:	fb05 3202 	mla	r2, r5, r2, r3
 8004ede:	2001      	movs	r0, #1
 8004ee0:	460f      	mov	r7, r1
 8004ee2:	e7a6      	b.n	8004e32 <_svfiprintf_r+0xc6>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	250a      	movs	r5, #10
 8004ee8:	4619      	mov	r1, r3
 8004eea:	3701      	adds	r7, #1
 8004eec:	9305      	str	r3, [sp, #20]
 8004eee:	4638      	mov	r0, r7
 8004ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ef4:	3a30      	subs	r2, #48	; 0x30
 8004ef6:	2a09      	cmp	r2, #9
 8004ef8:	d903      	bls.n	8004f02 <_svfiprintf_r+0x196>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0c8      	beq.n	8004e90 <_svfiprintf_r+0x124>
 8004efe:	9105      	str	r1, [sp, #20]
 8004f00:	e7c6      	b.n	8004e90 <_svfiprintf_r+0x124>
 8004f02:	fb05 2101 	mla	r1, r5, r1, r2
 8004f06:	2301      	movs	r3, #1
 8004f08:	4607      	mov	r7, r0
 8004f0a:	e7f0      	b.n	8004eee <_svfiprintf_r+0x182>
 8004f0c:	ab03      	add	r3, sp, #12
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	4622      	mov	r2, r4
 8004f12:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <_svfiprintf_r+0x1ec>)
 8004f14:	a904      	add	r1, sp, #16
 8004f16:	4640      	mov	r0, r8
 8004f18:	f3af 8000 	nop.w
 8004f1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f20:	4681      	mov	r9, r0
 8004f22:	d1d6      	bne.n	8004ed2 <_svfiprintf_r+0x166>
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	065b      	lsls	r3, r3, #25
 8004f28:	f53f af35 	bmi.w	8004d96 <_svfiprintf_r+0x2a>
 8004f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f2e:	b01d      	add	sp, #116	; 0x74
 8004f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f34:	ab03      	add	r3, sp, #12
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	4622      	mov	r2, r4
 8004f3a:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <_svfiprintf_r+0x1ec>)
 8004f3c:	a904      	add	r1, sp, #16
 8004f3e:	4640      	mov	r0, r8
 8004f40:	f000 f882 	bl	8005048 <_printf_i>
 8004f44:	e7ea      	b.n	8004f1c <_svfiprintf_r+0x1b0>
 8004f46:	bf00      	nop
 8004f48:	08005424 	.word	0x08005424
 8004f4c:	0800542a 	.word	0x0800542a
 8004f50:	0800542e 	.word	0x0800542e
 8004f54:	00000000 	.word	0x00000000
 8004f58:	08004cb9 	.word	0x08004cb9

08004f5c <_printf_common>:
 8004f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	4691      	mov	r9, r2
 8004f62:	461f      	mov	r7, r3
 8004f64:	688a      	ldr	r2, [r1, #8]
 8004f66:	690b      	ldr	r3, [r1, #16]
 8004f68:	4606      	mov	r6, r0
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	bfb8      	it	lt
 8004f6e:	4613      	movlt	r3, r2
 8004f70:	f8c9 3000 	str.w	r3, [r9]
 8004f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f78:	460c      	mov	r4, r1
 8004f7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f7e:	b112      	cbz	r2, 8004f86 <_printf_common+0x2a>
 8004f80:	3301      	adds	r3, #1
 8004f82:	f8c9 3000 	str.w	r3, [r9]
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	0699      	lsls	r1, r3, #26
 8004f8a:	bf42      	ittt	mi
 8004f8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f90:	3302      	addmi	r3, #2
 8004f92:	f8c9 3000 	strmi.w	r3, [r9]
 8004f96:	6825      	ldr	r5, [r4, #0]
 8004f98:	f015 0506 	ands.w	r5, r5, #6
 8004f9c:	d107      	bne.n	8004fae <_printf_common+0x52>
 8004f9e:	f104 0a19 	add.w	sl, r4, #25
 8004fa2:	68e3      	ldr	r3, [r4, #12]
 8004fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	42ab      	cmp	r3, r5
 8004fac:	dc29      	bgt.n	8005002 <_printf_common+0xa6>
 8004fae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	3300      	adds	r3, #0
 8004fb6:	bf18      	it	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	0692      	lsls	r2, r2, #26
 8004fbc:	d42e      	bmi.n	800501c <_printf_common+0xc0>
 8004fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	47c0      	blx	r8
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d021      	beq.n	8005010 <_printf_common+0xb4>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	68e5      	ldr	r5, [r4, #12]
 8004fd0:	f003 0306 	and.w	r3, r3, #6
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	bf18      	it	ne
 8004fd8:	2500      	movne	r5, #0
 8004fda:	f8d9 2000 	ldr.w	r2, [r9]
 8004fde:	f04f 0900 	mov.w	r9, #0
 8004fe2:	bf08      	it	eq
 8004fe4:	1aad      	subeq	r5, r5, r2
 8004fe6:	68a3      	ldr	r3, [r4, #8]
 8004fe8:	6922      	ldr	r2, [r4, #16]
 8004fea:	bf08      	it	eq
 8004fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	bfc4      	itt	gt
 8004ff4:	1a9b      	subgt	r3, r3, r2
 8004ff6:	18ed      	addgt	r5, r5, r3
 8004ff8:	341a      	adds	r4, #26
 8004ffa:	454d      	cmp	r5, r9
 8004ffc:	d11a      	bne.n	8005034 <_printf_common+0xd8>
 8004ffe:	2000      	movs	r0, #0
 8005000:	e008      	b.n	8005014 <_printf_common+0xb8>
 8005002:	2301      	movs	r3, #1
 8005004:	4652      	mov	r2, sl
 8005006:	4639      	mov	r1, r7
 8005008:	4630      	mov	r0, r6
 800500a:	47c0      	blx	r8
 800500c:	3001      	adds	r0, #1
 800500e:	d103      	bne.n	8005018 <_printf_common+0xbc>
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005018:	3501      	adds	r5, #1
 800501a:	e7c2      	b.n	8004fa2 <_printf_common+0x46>
 800501c:	2030      	movs	r0, #48	; 0x30
 800501e:	18e1      	adds	r1, r4, r3
 8005020:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800502a:	4422      	add	r2, r4
 800502c:	3302      	adds	r3, #2
 800502e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005032:	e7c4      	b.n	8004fbe <_printf_common+0x62>
 8005034:	2301      	movs	r3, #1
 8005036:	4622      	mov	r2, r4
 8005038:	4639      	mov	r1, r7
 800503a:	4630      	mov	r0, r6
 800503c:	47c0      	blx	r8
 800503e:	3001      	adds	r0, #1
 8005040:	d0e6      	beq.n	8005010 <_printf_common+0xb4>
 8005042:	f109 0901 	add.w	r9, r9, #1
 8005046:	e7d8      	b.n	8004ffa <_printf_common+0x9e>

08005048 <_printf_i>:
 8005048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800504c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005050:	460c      	mov	r4, r1
 8005052:	7e09      	ldrb	r1, [r1, #24]
 8005054:	b085      	sub	sp, #20
 8005056:	296e      	cmp	r1, #110	; 0x6e
 8005058:	4617      	mov	r7, r2
 800505a:	4606      	mov	r6, r0
 800505c:	4698      	mov	r8, r3
 800505e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005060:	f000 80b3 	beq.w	80051ca <_printf_i+0x182>
 8005064:	d822      	bhi.n	80050ac <_printf_i+0x64>
 8005066:	2963      	cmp	r1, #99	; 0x63
 8005068:	d036      	beq.n	80050d8 <_printf_i+0x90>
 800506a:	d80a      	bhi.n	8005082 <_printf_i+0x3a>
 800506c:	2900      	cmp	r1, #0
 800506e:	f000 80b9 	beq.w	80051e4 <_printf_i+0x19c>
 8005072:	2958      	cmp	r1, #88	; 0x58
 8005074:	f000 8083 	beq.w	800517e <_printf_i+0x136>
 8005078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800507c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005080:	e032      	b.n	80050e8 <_printf_i+0xa0>
 8005082:	2964      	cmp	r1, #100	; 0x64
 8005084:	d001      	beq.n	800508a <_printf_i+0x42>
 8005086:	2969      	cmp	r1, #105	; 0x69
 8005088:	d1f6      	bne.n	8005078 <_printf_i+0x30>
 800508a:	6820      	ldr	r0, [r4, #0]
 800508c:	6813      	ldr	r3, [r2, #0]
 800508e:	0605      	lsls	r5, r0, #24
 8005090:	f103 0104 	add.w	r1, r3, #4
 8005094:	d52a      	bpl.n	80050ec <_printf_i+0xa4>
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6011      	str	r1, [r2, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	da03      	bge.n	80050a6 <_printf_i+0x5e>
 800509e:	222d      	movs	r2, #45	; 0x2d
 80050a0:	425b      	negs	r3, r3
 80050a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050a6:	486f      	ldr	r0, [pc, #444]	; (8005264 <_printf_i+0x21c>)
 80050a8:	220a      	movs	r2, #10
 80050aa:	e039      	b.n	8005120 <_printf_i+0xd8>
 80050ac:	2973      	cmp	r1, #115	; 0x73
 80050ae:	f000 809d 	beq.w	80051ec <_printf_i+0x1a4>
 80050b2:	d808      	bhi.n	80050c6 <_printf_i+0x7e>
 80050b4:	296f      	cmp	r1, #111	; 0x6f
 80050b6:	d020      	beq.n	80050fa <_printf_i+0xb2>
 80050b8:	2970      	cmp	r1, #112	; 0x70
 80050ba:	d1dd      	bne.n	8005078 <_printf_i+0x30>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	f043 0320 	orr.w	r3, r3, #32
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	e003      	b.n	80050ce <_printf_i+0x86>
 80050c6:	2975      	cmp	r1, #117	; 0x75
 80050c8:	d017      	beq.n	80050fa <_printf_i+0xb2>
 80050ca:	2978      	cmp	r1, #120	; 0x78
 80050cc:	d1d4      	bne.n	8005078 <_printf_i+0x30>
 80050ce:	2378      	movs	r3, #120	; 0x78
 80050d0:	4865      	ldr	r0, [pc, #404]	; (8005268 <_printf_i+0x220>)
 80050d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050d6:	e055      	b.n	8005184 <_printf_i+0x13c>
 80050d8:	6813      	ldr	r3, [r2, #0]
 80050da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050de:	1d19      	adds	r1, r3, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6011      	str	r1, [r2, #0]
 80050e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050e8:	2301      	movs	r3, #1
 80050ea:	e08c      	b.n	8005206 <_printf_i+0x1be>
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050f2:	6011      	str	r1, [r2, #0]
 80050f4:	bf18      	it	ne
 80050f6:	b21b      	sxthne	r3, r3
 80050f8:	e7cf      	b.n	800509a <_printf_i+0x52>
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	1d18      	adds	r0, r3, #4
 8005100:	6010      	str	r0, [r2, #0]
 8005102:	0628      	lsls	r0, r5, #24
 8005104:	d501      	bpl.n	800510a <_printf_i+0xc2>
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	e002      	b.n	8005110 <_printf_i+0xc8>
 800510a:	0668      	lsls	r0, r5, #25
 800510c:	d5fb      	bpl.n	8005106 <_printf_i+0xbe>
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	296f      	cmp	r1, #111	; 0x6f
 8005112:	bf14      	ite	ne
 8005114:	220a      	movne	r2, #10
 8005116:	2208      	moveq	r2, #8
 8005118:	4852      	ldr	r0, [pc, #328]	; (8005264 <_printf_i+0x21c>)
 800511a:	2100      	movs	r1, #0
 800511c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005120:	6865      	ldr	r5, [r4, #4]
 8005122:	2d00      	cmp	r5, #0
 8005124:	60a5      	str	r5, [r4, #8]
 8005126:	f2c0 8095 	blt.w	8005254 <_printf_i+0x20c>
 800512a:	6821      	ldr	r1, [r4, #0]
 800512c:	f021 0104 	bic.w	r1, r1, #4
 8005130:	6021      	str	r1, [r4, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d13d      	bne.n	80051b2 <_printf_i+0x16a>
 8005136:	2d00      	cmp	r5, #0
 8005138:	f040 808e 	bne.w	8005258 <_printf_i+0x210>
 800513c:	4665      	mov	r5, ip
 800513e:	2a08      	cmp	r2, #8
 8005140:	d10b      	bne.n	800515a <_printf_i+0x112>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	07db      	lsls	r3, r3, #31
 8005146:	d508      	bpl.n	800515a <_printf_i+0x112>
 8005148:	6923      	ldr	r3, [r4, #16]
 800514a:	6862      	ldr	r2, [r4, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	bfde      	ittt	le
 8005150:	2330      	movle	r3, #48	; 0x30
 8005152:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005156:	f105 35ff 	addle.w	r5, r5, #4294967295
 800515a:	ebac 0305 	sub.w	r3, ip, r5
 800515e:	6123      	str	r3, [r4, #16]
 8005160:	f8cd 8000 	str.w	r8, [sp]
 8005164:	463b      	mov	r3, r7
 8005166:	aa03      	add	r2, sp, #12
 8005168:	4621      	mov	r1, r4
 800516a:	4630      	mov	r0, r6
 800516c:	f7ff fef6 	bl	8004f5c <_printf_common>
 8005170:	3001      	adds	r0, #1
 8005172:	d14d      	bne.n	8005210 <_printf_i+0x1c8>
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	b005      	add	sp, #20
 800517a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800517e:	4839      	ldr	r0, [pc, #228]	; (8005264 <_printf_i+0x21c>)
 8005180:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005184:	6813      	ldr	r3, [r2, #0]
 8005186:	6821      	ldr	r1, [r4, #0]
 8005188:	1d1d      	adds	r5, r3, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6015      	str	r5, [r2, #0]
 800518e:	060a      	lsls	r2, r1, #24
 8005190:	d50b      	bpl.n	80051aa <_printf_i+0x162>
 8005192:	07ca      	lsls	r2, r1, #31
 8005194:	bf44      	itt	mi
 8005196:	f041 0120 	orrmi.w	r1, r1, #32
 800519a:	6021      	strmi	r1, [r4, #0]
 800519c:	b91b      	cbnz	r3, 80051a6 <_printf_i+0x15e>
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	f022 0220 	bic.w	r2, r2, #32
 80051a4:	6022      	str	r2, [r4, #0]
 80051a6:	2210      	movs	r2, #16
 80051a8:	e7b7      	b.n	800511a <_printf_i+0xd2>
 80051aa:	064d      	lsls	r5, r1, #25
 80051ac:	bf48      	it	mi
 80051ae:	b29b      	uxthmi	r3, r3
 80051b0:	e7ef      	b.n	8005192 <_printf_i+0x14a>
 80051b2:	4665      	mov	r5, ip
 80051b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80051b8:	fb02 3311 	mls	r3, r2, r1, r3
 80051bc:	5cc3      	ldrb	r3, [r0, r3]
 80051be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051c2:	460b      	mov	r3, r1
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d1f5      	bne.n	80051b4 <_printf_i+0x16c>
 80051c8:	e7b9      	b.n	800513e <_printf_i+0xf6>
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	6825      	ldr	r5, [r4, #0]
 80051ce:	1d18      	adds	r0, r3, #4
 80051d0:	6961      	ldr	r1, [r4, #20]
 80051d2:	6010      	str	r0, [r2, #0]
 80051d4:	0628      	lsls	r0, r5, #24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	d501      	bpl.n	80051de <_printf_i+0x196>
 80051da:	6019      	str	r1, [r3, #0]
 80051dc:	e002      	b.n	80051e4 <_printf_i+0x19c>
 80051de:	066a      	lsls	r2, r5, #25
 80051e0:	d5fb      	bpl.n	80051da <_printf_i+0x192>
 80051e2:	8019      	strh	r1, [r3, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	4665      	mov	r5, ip
 80051e8:	6123      	str	r3, [r4, #16]
 80051ea:	e7b9      	b.n	8005160 <_printf_i+0x118>
 80051ec:	6813      	ldr	r3, [r2, #0]
 80051ee:	1d19      	adds	r1, r3, #4
 80051f0:	6011      	str	r1, [r2, #0]
 80051f2:	681d      	ldr	r5, [r3, #0]
 80051f4:	6862      	ldr	r2, [r4, #4]
 80051f6:	2100      	movs	r1, #0
 80051f8:	4628      	mov	r0, r5
 80051fa:	f000 f837 	bl	800526c <memchr>
 80051fe:	b108      	cbz	r0, 8005204 <_printf_i+0x1bc>
 8005200:	1b40      	subs	r0, r0, r5
 8005202:	6060      	str	r0, [r4, #4]
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	2300      	movs	r3, #0
 800520a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520e:	e7a7      	b.n	8005160 <_printf_i+0x118>
 8005210:	6923      	ldr	r3, [r4, #16]
 8005212:	462a      	mov	r2, r5
 8005214:	4639      	mov	r1, r7
 8005216:	4630      	mov	r0, r6
 8005218:	47c0      	blx	r8
 800521a:	3001      	adds	r0, #1
 800521c:	d0aa      	beq.n	8005174 <_printf_i+0x12c>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	079b      	lsls	r3, r3, #30
 8005222:	d413      	bmi.n	800524c <_printf_i+0x204>
 8005224:	68e0      	ldr	r0, [r4, #12]
 8005226:	9b03      	ldr	r3, [sp, #12]
 8005228:	4298      	cmp	r0, r3
 800522a:	bfb8      	it	lt
 800522c:	4618      	movlt	r0, r3
 800522e:	e7a3      	b.n	8005178 <_printf_i+0x130>
 8005230:	2301      	movs	r3, #1
 8005232:	464a      	mov	r2, r9
 8005234:	4639      	mov	r1, r7
 8005236:	4630      	mov	r0, r6
 8005238:	47c0      	blx	r8
 800523a:	3001      	adds	r0, #1
 800523c:	d09a      	beq.n	8005174 <_printf_i+0x12c>
 800523e:	3501      	adds	r5, #1
 8005240:	68e3      	ldr	r3, [r4, #12]
 8005242:	9a03      	ldr	r2, [sp, #12]
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	42ab      	cmp	r3, r5
 8005248:	dcf2      	bgt.n	8005230 <_printf_i+0x1e8>
 800524a:	e7eb      	b.n	8005224 <_printf_i+0x1dc>
 800524c:	2500      	movs	r5, #0
 800524e:	f104 0919 	add.w	r9, r4, #25
 8005252:	e7f5      	b.n	8005240 <_printf_i+0x1f8>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1ac      	bne.n	80051b2 <_printf_i+0x16a>
 8005258:	7803      	ldrb	r3, [r0, #0]
 800525a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800525e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005262:	e76c      	b.n	800513e <_printf_i+0xf6>
 8005264:	08005435 	.word	0x08005435
 8005268:	08005446 	.word	0x08005446

0800526c <memchr>:
 800526c:	b510      	push	{r4, lr}
 800526e:	b2c9      	uxtb	r1, r1
 8005270:	4402      	add	r2, r0
 8005272:	4290      	cmp	r0, r2
 8005274:	4603      	mov	r3, r0
 8005276:	d101      	bne.n	800527c <memchr+0x10>
 8005278:	2300      	movs	r3, #0
 800527a:	e003      	b.n	8005284 <memchr+0x18>
 800527c:	781c      	ldrb	r4, [r3, #0]
 800527e:	3001      	adds	r0, #1
 8005280:	428c      	cmp	r4, r1
 8005282:	d1f6      	bne.n	8005272 <memchr+0x6>
 8005284:	4618      	mov	r0, r3
 8005286:	bd10      	pop	{r4, pc}

08005288 <memmove>:
 8005288:	4288      	cmp	r0, r1
 800528a:	b510      	push	{r4, lr}
 800528c:	eb01 0302 	add.w	r3, r1, r2
 8005290:	d807      	bhi.n	80052a2 <memmove+0x1a>
 8005292:	1e42      	subs	r2, r0, #1
 8005294:	4299      	cmp	r1, r3
 8005296:	d00a      	beq.n	80052ae <memmove+0x26>
 8005298:	f811 4b01 	ldrb.w	r4, [r1], #1
 800529c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80052a0:	e7f8      	b.n	8005294 <memmove+0xc>
 80052a2:	4283      	cmp	r3, r0
 80052a4:	d9f5      	bls.n	8005292 <memmove+0xa>
 80052a6:	1881      	adds	r1, r0, r2
 80052a8:	1ad2      	subs	r2, r2, r3
 80052aa:	42d3      	cmn	r3, r2
 80052ac:	d100      	bne.n	80052b0 <memmove+0x28>
 80052ae:	bd10      	pop	{r4, pc}
 80052b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80052b8:	e7f7      	b.n	80052aa <memmove+0x22>

080052ba <_realloc_r>:
 80052ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052bc:	4607      	mov	r7, r0
 80052be:	4614      	mov	r4, r2
 80052c0:	460e      	mov	r6, r1
 80052c2:	b921      	cbnz	r1, 80052ce <_realloc_r+0x14>
 80052c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052c8:	4611      	mov	r1, r2
 80052ca:	f7ff bc69 	b.w	8004ba0 <_malloc_r>
 80052ce:	b922      	cbnz	r2, 80052da <_realloc_r+0x20>
 80052d0:	f7ff fc1a 	bl	8004b08 <_free_r>
 80052d4:	4625      	mov	r5, r4
 80052d6:	4628      	mov	r0, r5
 80052d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052da:	f000 f814 	bl	8005306 <_malloc_usable_size_r>
 80052de:	42a0      	cmp	r0, r4
 80052e0:	d20f      	bcs.n	8005302 <_realloc_r+0x48>
 80052e2:	4621      	mov	r1, r4
 80052e4:	4638      	mov	r0, r7
 80052e6:	f7ff fc5b 	bl	8004ba0 <_malloc_r>
 80052ea:	4605      	mov	r5, r0
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d0f2      	beq.n	80052d6 <_realloc_r+0x1c>
 80052f0:	4631      	mov	r1, r6
 80052f2:	4622      	mov	r2, r4
 80052f4:	f7ff fbf4 	bl	8004ae0 <memcpy>
 80052f8:	4631      	mov	r1, r6
 80052fa:	4638      	mov	r0, r7
 80052fc:	f7ff fc04 	bl	8004b08 <_free_r>
 8005300:	e7e9      	b.n	80052d6 <_realloc_r+0x1c>
 8005302:	4635      	mov	r5, r6
 8005304:	e7e7      	b.n	80052d6 <_realloc_r+0x1c>

08005306 <_malloc_usable_size_r>:
 8005306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800530a:	1f18      	subs	r0, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	bfbc      	itt	lt
 8005310:	580b      	ldrlt	r3, [r1, r0]
 8005312:	18c0      	addlt	r0, r0, r3
 8005314:	4770      	bx	lr
	...

08005318 <_init>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	bf00      	nop
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr

08005324 <_fini>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	bf00      	nop
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr
